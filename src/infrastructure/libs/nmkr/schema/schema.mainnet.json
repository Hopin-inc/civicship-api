{
  "openapi": "3.0.1",
  "info": {
    "title": "NMKR Studio Api (Mainnet) - Deprecated",
    "description": "Documentation of the NMKR Studio Api Functions. All API Functions must called from https://studio-api.nmkr.io",
    "contact": {
      "name": "Support NMKR Studio",
      "url": "https://nmkr.io"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://studio-api.nmkr.io"
    }
  ],
  "paths": {
    "/CancelAddressReservation/{apikey}/{nftprojectid}/{paymentaddress}": {
      "get": {
        "tags": [
          "CancelAddressReservation"
        ],
        "summary": "Cancels a address reservation (project id)",
        "description": "When you call this API, the reservation of all nfts dedicated to this address will released to free state. This function can be called, when a user closes his browser or when he hit on a \"Cancel Reservation\" Button",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation was successful"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Address is not in active state - eg. already paid or already released to free",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/CancelAddressReservation/{apikey}/{projectuid}/{paymentaddress}": {
      "get": {
        "tags": [
          "CancelAddressReservation"
        ],
        "summary": "Cancels a address reservation (project uid)",
        "description": "When you call this API, the reservation of all nfts dedicated to this address will released to free state. This function can be called, when a user closes his browser or when he hit on a \"Cancel Reservation\" Button",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation was successful"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Address is not in active state - eg. already paid or already released to free",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/CheckAddress/{apikey}/{nftprojectid}/{address}": {
      "get": {
        "tags": [
          "CheckAddress"
        ],
        "summary": "Checks an address for state changes (project id)",
        "description": "You can call this api to check if a user has paid to this particular address or if the address has expired. The reserved/sold NFTs will only filled after the amount was fully paid. This is for security reasons. In the reserved state, only the nft ids and tokenamount are submitted \r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Apiresultclass with the information about the address incl. the assigned NFTs",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The address was not found in our database or not assiged to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/CheckAddress/{apikey}/{projectuid}/{address}": {
      "get": {
        "tags": [
          "CheckAddress"
        ],
        "summary": "Checks an address for state changes (project uid)",
        "description": "You can call this api to check if a user has paid to this particular address or if the address has expired. The reserved/sold NFTs will only filled after the amount was fully paid. This is for security reasons. In the reserved state, only the nft ids and tokenamount are submitted \r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Apiresultclass with the information about the address incl. the assigned NFTs",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The address was not found in our database or not assiged to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/CheckWalletValidation/{apikey}/{validationuid}/{lovelace}": {
      "get": {
        "tags": [
          "CheckWalletValidation"
        ],
        "summary": "Returns the result of a wallet validation",
        "description": "Here you can check the result of a wallet validation. The result are \"notvalidated\", \"validated\",\"expired\"",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validationuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lovelace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CheckWalletValidationResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWalletValidationResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWalletValidationResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWalletValidationResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/CreateProject/{apikey}": {
      "post": {
        "tags": [
          "CreateProject"
        ],
        "summary": "Creates a new Project",
        "description": "WIth this Controller you can create a new project",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectClass"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectClass"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectClass"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the UploadNftResult Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNewProjectResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNewProjectResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNewProjectResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No Image Content was provided. Send a file either as Base64 or as Link or IPFS Hash"
          },
          "409": {
            "description": "There is a conflict with the provided images. Send a file either as Base64 or as Link or IPFS Hash"
          }
        }
      }
    },
    "/DeleteNft/{apikey}/{nftprojectid}/{nftid}": {
      "get": {
        "tags": [
          "DeleteNft"
        ],
        "summary": "Deletes a nft from the database (nft and project id)",
        "description": "You can delete a nft, if it is not in sold or reserved state",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteNft/{apikey}/{nftuid}": {
      "get": {
        "tags": [
          "DeleteNft"
        ],
        "summary": "Deletes a nft from the database (nft uid)",
        "description": "You can delete a nft, if it is not in sold or reserved state",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForRandomNftSale/{apikey}/{nftprojectid}/{countnft}/{lovelace}": {
      "get": {
        "tags": [
          "GetAddressForRandomNftSale"
        ],
        "summary": "Returns an address for a random nft sale (project id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n\r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lovelace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests"
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForRandomNftSale/{apikey}/{nftprojectid}/{countnft}": {
      "get": {
        "tags": [
          "GetAddressForRandomNftSale"
        ],
        "summary": "Returns an address for a random nft sale (price from pricelist) (project id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n\r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests"
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForRandomNftSale/{apikey}/{projectuid}/{countnft}": {
      "get": {
        "tags": [
          "GetAddressForRandomNftSale"
        ],
        "summary": "Returns an address for a random nft sale (price from pricelist) (project uid)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n\r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests"
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForRandomNftSale/{apikey}/{projectuid}/{countnft}/{lovelace}": {
      "get": {
        "tags": [
          "GetAddressForRandomNftSale"
        ],
        "summary": "Returns an address for a random nft sale (project id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n\r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lovelace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests"
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForSpecificNftSale/{apikey}/{nftprojectid}/{nftid}/{tokencount}/{lovelace}": {
      "get": {
        "tags": [
          "GetAddressForSpecificNftSale"
        ],
        "summary": "Returns an address for a specific nft sale (no random distribution) (project and nft id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n            \r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "lovelace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForSpecificNftSale/{apikey}/{nftuid}/{tokencount}/{lovelace}": {
      "get": {
        "tags": [
          "GetAddressForSpecificNftSale"
        ],
        "summary": "Returns an address for a specific nft sale (no random distribution)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n            \r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "lovelace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForSpecificNftSale/{apikey}/{nftprojectid}/{nftid}/{tokencount}": {
      "get": {
        "tags": [
          "GetAddressForSpecificNftSale"
        ],
        "summary": "Returns an address for a specific nft sale (no random distribution) - price from pricelist or specific nft price (project and nft id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n            \r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForSpecificNftSale/{apikey}/{nftuid}/{tokencount}": {
      "get": {
        "tags": [
          "GetAddressForSpecificNftSale"
        ],
        "summary": "Returns an address for a specific nft sale (no random distribution) - price from pricelist or specific nft price (nft uid)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n            \r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetAddressForSpecificNftSale/{apikey}/{nftprojectid}": {
      "post": {
        "tags": [
          "GetAddressForSpecificNftSale"
        ],
        "summary": "Returns an address for a multiple specific nfts sale (no random distribution) (project id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalreceiveraddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReserveMultipleNftsClass"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReserveMultipleNftsClass"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReserveMultipleNftsClass"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetCounts/{apikey}/{nftprojectid}": {
      "get": {
        "tags": [
          "GetCounts"
        ],
        "summary": "Returns the count of the sold, reserved and free nfts (project id)",
        "description": "You will get the count of all sold, reserved and free nfts of a particular project",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftCountsClass",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetCounts/{apikey}/{projectuid}": {
      "get": {
        "tags": [
          "GetCounts"
        ],
        "summary": "Returns the count of the sold, reserved and free nfts (project uid)",
        "description": "You will get the count of all sold, reserved and free nfts of a particular project",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftCountsClass",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetNftDetails/{apikey}/{nftprojectid}/{nftname}": {
      "get": {
        "tags": [
          "GetNftDetails"
        ],
        "summary": "Returns detail information about one nft specified by its name (nftproject id)",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about one nft with the submitted name",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetNftDetailsById/{apikey}/{nftprojectid}/{nftid}": {
      "get": {
        "tags": [
          "GetNftDetailsById"
        ],
        "summary": "Returns detail information about one nft specified by Id (project and nft id)",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about one nfts with the submitted id",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetNftDetailsById/{apikey}/{nftuid}": {
      "get": {
        "tags": [
          "GetNftDetailsById"
        ],
        "summary": "Returns detail information about one nft specified by Id (nft uid)",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about one nfts with the submitted id",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetNfts/{apikey}/{nftprojectid}/{state}": {
      "get": {
        "tags": [
          "GetNfts"
        ],
        "summary": "Returns detail information about all nfts with a specific state. *** DEPRECATED - use the paged version ***",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about the nfts within a specific state.\r\nState \"all\" lists all available nft in this project. The other states are: \"free\", \"reserved\", \"sold\" and \"error\"\r\n*** DEPRECATED - use the paged version ***",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a List of the NFT Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The state was not known - possible states are: free, reserved, sold, error and all",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetNfts/{apikey}/{nftprojectid}/{state}/{count}/{page}": {
      "get": {
        "tags": [
          "GetNfts"
        ],
        "summary": "Returns detail information about nfts with a specific state with Pagination support. (project id)",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about the nfts within a specific state.\r\nState \"all\" lists all available nft in this project. The other states are: \"free\", \"reserved\", \"sold\" and \"error\"",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "(Optional) The sort order of the result. Possible values are: id (default),id_desc (descending order), selldate (on sold nfts) and selldate_desc (descending order)",
            "schema": {
              "type": "string",
              "default": "id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a List of the NFT Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The state was not known - possible states are: free, reserved, sold, error and all",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetNfts/{apikey}/{projectuid}/{state}/{count}/{page}": {
      "get": {
        "tags": [
          "GetNfts"
        ],
        "summary": "Returns detail information about nfts with a specific state with Pagination support. (project uid)",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about the nfts within a specific state.\r\nState \"all\" lists all available nft in this project. The other states are: \"free\", \"reserved\", \"sold\" and \"error\"",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "(Optional) The sort order of the result. Possible values are: id (default),id_desc (descending order), selldate (on sold nfts) and selldate_desc (descending order)",
            "schema": {
              "type": "string",
              "default": "id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a List of the NFT Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The projectuid was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetPricelist/{apikey}/{nftprojectid}": {
      "get": {
        "tags": [
          "GetPricelist"
        ],
        "summary": "Returns the actual valid pricelist for this project (project id)",
        "description": "You will get the predefined prices for one or more nf",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the PricelistClass",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetPricelist/{apikey}/{projectuid}": {
      "get": {
        "tags": [
          "GetPricelist"
        ],
        "summary": "Returns the actual valid pricelist for this project (project uid)",
        "description": "You will get the predefined prices for one or more nf",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the PricelistClass",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetProjectDetails/{apikey}/{customerid}/{nftprojectid}": {
      "get": {
        "tags": [
          "GetProjectDetails"
        ],
        "summary": "Returns detail information about a project",
        "description": "You will receive all information about this project",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetProjectDetails/{apikey}/{projectuid}": {
      "get": {
        "tags": [
          "GetProjectDetails"
        ],
        "summary": "Returns detail information about a project",
        "description": "You will receive all information about this project",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/GetWalletValidationAddress/{apikey}/{validationname}": {
      "get": {
        "tags": [
          "GetWalletValidationAddress"
        ],
        "summary": "Returns an address for wallet validation",
        "description": "When you call this API, you will receive an address for a wallet validation. The user can send any ada to this address and the ada (and tokens) will sent back to the sender. With the function CheckWalletValidation you can check the state of the address",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validationname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetWalletValidationAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/ListProjects/{apikey}": {
      "get": {
        "tags": [
          "ListProjects"
        ],
        "summary": "Lists all your projects",
        "description": "You will receive a list with all of your projects\r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The provided informations are not valid for this request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The apikey or the projects where not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/ListProjects/{apikey}/{count}/{page}": {
      "get": {
        "tags": [
          "ListProjects"
        ],
        "summary": "Lists all your projects with pagination",
        "description": "You will receive a list with all of your projects\r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The provided informations are not valid for this request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The apikey or the projects where not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/ListProjects/{apikey}/{customerid}/{count}/{page}": {
      "get": {
        "tags": [
          "ListProjects"
        ],
        "summary": "Lists all your projects with pagination",
        "description": "You will receive a list with all of your projects\r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The provided informations are not valid for this request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The apikey or the projects where not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/MintAndSendRandom/{apikey}/{nftprojectid}/{countnft}/{receiveraddress}": {
      "get": {
        "tags": [
          "MintAndSendRandom"
        ],
        "summary": "Mints random Nfts and sends it to an Address",
        "description": "When you call this API, random NFTs will be selected, minted and send to an ada address. You will need ADA in your Account for the transaction and minting costs.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "receiveraddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There are pending transactions on the sender address (your account address). Please wait a second",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "402": {
            "description": "Too less ADA in your account. Fill up ADA first before try to mint and send",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The receiveraddress is not a valid cardano address or a valid adahandle",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/MintAndSendSpecific/{apikey}/{nftprojectid}/{nftid}/{tokencount}/{receiveraddress}": {
      "get": {
        "tags": [
          "MintAndSendSpecific"
        ],
        "summary": "Mints a specific Nft and sends it to an Address",
        "description": "When you call this API, a specific NFT will be minted and send to an ada address. You will need ADA in your Account for the transaction and minting costs.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "receiveraddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "NFT no more available (already sold)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There are pending transactions on the sender address (your account address). Please wait a second",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "402": {
            "description": "Too less ADA in your account. Fill up ADA first before try to mint and send",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The receiveraddress is not a valid cardano address or a valid ada handle",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/UpdateMetadata/{apikey}/{nftprojectid}/{nftid}": {
      "post": {
        "tags": [
          "UpdateMetadata"
        ],
        "summary": "Updates the Metadata for one specific NFT",
        "description": "With this API you can update the Metadata Override for one specific NFT\r\nIf you leave the field blank, the Metadata override will be deleted and the Metadata from the project will be used.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nftid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UploadMetadataClass"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UploadMetadataClass"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UploadMetadataClass"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Nftdetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              }
            }
          },
          "404": {
            "description": "The NFT was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/UploadNft/{apikey}/{nftprojectid}": {
      "post": {
        "tags": [
          "UploadNft"
        ],
        "summary": "Upload a File to a project and pin it to IPFS",
        "description": "With this API you can upload a file to IPFS and add it to a project. You can upload the file as BASE64 Content or as URL Link or as IPFS Hash.\r\nIf you submit Metadata, this Metadata will be used instead of the Metadatatemplate from the project. You can either submit Metadata or MetadataPlaceholder, but not both (because it makes no sense).\r\nThe Metadata field is optional and if you dont use it, it will use the Template from your project. It is poosible to mix both versions in one project. You can have one nft with own metadata and other nfts\r\nwith the template.",
        "parameters": [
          {
            "name": "apikey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftprojectid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UploadNftClass"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UploadNftClass"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UploadNftClass"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the UploadNftResult Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadNftResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadNftResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadNftResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the provided images. Send a file either as Base64 or as Link or IPFS Hash",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No Image Content was provided. Send a file either as Base64 or as Link or IPFS Hash"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiErrorResultClass": {
        "type": "object",
        "properties": {
          "resultState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResultStates"
              }
            ]
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "innerErrorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AptosProjectDetails": {
        "type": "object",
        "properties": {
          "collectionImage": {
            "type": "string",
            "nullable": true
          },
          "collectionName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Blockchain": {
        "enum": [
          "Cardano",
          "Solana",
          "Aptos",
          "Hedara",
          "Polygon",
          "Ethereum",
          "Bitcoin",
          "Unknown"
        ],
        "type": "string"
      },
      "CheckAddressResultClass": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "nullable": true
          },
          "lovelace": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "receivedAptosOctas": {
            "type": "integer",
            "format": "int64"
          },
          "receivedSolanaLamports": {
            "type": "integer",
            "format": "int64"
          },
          "receivedCardanoLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "coin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              }
            ]
          },
          "hasToPay": {
            "type": "integer",
            "format": "int64"
          },
          "additionalPriceInTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tokens"
            },
            "nullable": true
          },
          "payDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "transaction": {
            "type": "string",
            "nullable": true
          },
          "senderAddress": {
            "type": "string",
            "nullable": true
          },
          "reservedNft": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            },
            "nullable": true
          },
          "rejectReason": {
            "type": "string",
            "nullable": true
          },
          "rejectParameter": {
            "type": "string",
            "nullable": true
          },
          "stakeReward": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "discount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "customProperty": {
            "type": "string",
            "nullable": true
          },
          "tokenReward": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "countNftsOrTokens": {
            "type": "integer",
            "format": "int64"
          },
          "reservationType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckWalletValidationResultClass": {
        "type": "object",
        "properties": {
          "validationResult": {
            "type": "string",
            "nullable": true
          },
          "senderAddress": {
            "type": "string",
            "nullable": true
          },
          "stakeAddress": {
            "type": "string",
            "nullable": true
          },
          "lovelace": {
            "type": "integer",
            "format": "int64"
          },
          "validationaddress": {
            "type": "string",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "validationName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "enum": [
          "ADA",
          "SOL",
          "USDC",
          "ETH",
          "USD",
          "EUR",
          "JPY",
          "APT",
          "BTC",
          "HBAR",
          "SONY",
          "MATIC"
        ],
        "type": "string"
      },
      "CreateNewProjectResultClass": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "policyScript": {
            "type": "string",
            "nullable": true
          },
          "policyExpiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "uid": {
            "type": "string",
            "nullable": true
          },
          "metadataTemplateAptos": {
            "type": "string",
            "nullable": true
          },
          "metadataTemplateSolana": {
            "type": "string",
            "nullable": true
          },
          "enabledCoins": {
            "type": "string",
            "nullable": true
          },
          "solanaUpdateAuthority": {
            "type": "string",
            "nullable": true
          },
          "aptosCollectionAddress": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateProjectClass": {
        "type": "object",
        "properties": {
          "projectname": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "projecturl": {
            "type": "string",
            "nullable": true
          },
          "tokennamePrefix": {
            "type": "string",
            "nullable": true
          },
          "policyExpires": {
            "type": "boolean"
          },
          "policyLocksDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payoutWalletaddress": {
            "type": "string",
            "nullable": true
          },
          "maxNftSupply": {
            "type": "integer",
            "format": "int64"
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyClass"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "addressExpiretime": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetPaymentAddressResultClass": {
        "type": "object",
        "properties": {
          "paymentAddress": {
            "type": "string",
            "nullable": true
          },
          "paymentAddressId": {
            "type": "integer",
            "format": "int32"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "adaToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "solToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "aptToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "debug": {
            "type": "string",
            "nullable": true
          },
          "priceInEur": {
            "type": "number",
            "format": "double"
          },
          "priceInUsd": {
            "type": "number",
            "format": "double"
          },
          "priceInJpy": {
            "type": "number",
            "format": "double"
          },
          "priceInBtc": {
            "type": "number",
            "format": "double"
          },
          "effectivedate": {
            "type": "string",
            "format": "date-time"
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "additionalPriceInTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tokens"
            },
            "nullable": true
          },
          "sendbackToUser": {
            "type": "integer",
            "format": "int64"
          },
          "revervationtype": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "priceInLamport": {
            "type": "integer",
            "format": "int64"
          },
          "priceInOcta": {
            "type": "integer",
            "format": "int64"
          },
          "priceInSatoshi": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GetWalletValidationAddressResultClass": {
        "type": "object",
        "properties": {
          "validationUId": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "lovelace": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "MetadataPlaceholderClass": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MintAndSendResultClass": {
        "type": "object",
        "properties": {
          "mintAndSendId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sendedNft": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NFT": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uid": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayname": {
            "type": "string",
            "nullable": true
          },
          "detaildata": {
            "type": "string",
            "nullable": true
          },
          "ipfsLink": {
            "type": "string",
            "nullable": true
          },
          "gatewayLink": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "minted": {
            "type": "boolean"
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "string",
            "nullable": true
          },
          "assetname": {
            "type": "string",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "nullable": true
          },
          "initialMintTxHash": {
            "type": "string",
            "nullable": true
          },
          "series": {
            "type": "string",
            "nullable": true
          },
          "tokenamount": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "selldate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "paymentGatewayLinkForSpecificSale": {
            "type": "string",
            "nullable": true
          },
          "priceSolana": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "priceAptos": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftCountsClass": {
        "type": "object",
        "properties": {
          "nftTotal": {
            "type": "integer",
            "format": "int64"
          },
          "sold": {
            "type": "integer",
            "format": "int64"
          },
          "free": {
            "type": "integer",
            "format": "int64"
          },
          "reserved": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "integer",
            "format": "int64"
          },
          "blocked": {
            "type": "integer",
            "format": "int64"
          },
          "totalTokens": {
            "type": "integer",
            "format": "int64"
          },
          "totalBlocked": {
            "type": "integer",
            "format": "int64"
          },
          "unknownOrBurnedState": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "NftDetailsClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "ipfshash": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayname": {
            "type": "string",
            "nullable": true
          },
          "detaildata": {
            "type": "string",
            "nullable": true
          },
          "minted": {
            "type": "boolean"
          },
          "receiveraddress": {
            "type": "string",
            "nullable": true
          },
          "selldate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "soldby": {
            "type": "string",
            "nullable": true
          },
          "reserveduntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "policyid": {
            "type": "string",
            "nullable": true
          },
          "assetid": {
            "type": "string",
            "nullable": true
          },
          "assetname": {
            "type": "string",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "nullable": true
          },
          "initialminttxhash": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "series": {
            "type": "string",
            "nullable": true
          },
          "ipfsGatewayAddress": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "singlePrice": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "uid": {
            "type": "string",
            "nullable": true
          },
          "paymentGatewayLinkForSpecificSale": {
            "type": "string",
            "nullable": true
          },
          "sendBackCentralPaymentInLovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "priceInLovelaceCentralPayments": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "uploadSource": {
            "type": "string",
            "nullable": true
          },
          "priceInLamportCentralPayments": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "singlePriceSolana": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "priceInOctsCentralPayments": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "mintedOnBlockchain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Blockchain"
              }
            ]
          },
          "mintingfees": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "string",
            "nullable": true
          },
          "fileFromBase64": {
            "type": "string",
            "nullable": true
          },
          "fileFromsUrl": {
            "type": "string",
            "nullable": true
          },
          "fileFromIPFS": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "displayname": {
            "type": "string",
            "nullable": true
          },
          "metadataPlaceholder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataPlaceholderClass"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftProjectsDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "projectname": {
            "type": "string",
            "nullable": true
          },
          "projecturl": {
            "type": "string",
            "nullable": true
          },
          "projectLogo": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "free": {
            "type": "integer",
            "format": "int64"
          },
          "sold": {
            "type": "integer",
            "format": "int64"
          },
          "reserved": {
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "blocked": {
            "type": "integer",
            "format": "int64"
          },
          "totalBlocked": {
            "type": "integer",
            "format": "int64"
          },
          "totalTokens": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "integer",
            "format": "int64"
          },
          "unknownOrBurnedState": {
            "type": "integer",
            "format": "int64"
          },
          "uid": {
            "type": "string",
            "nullable": true
          },
          "maxTokenSupply": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "addressReservationTime": {
            "type": "integer",
            "format": "int32"
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "enableCrossSaleOnPaymentGateway": {
            "type": "boolean"
          },
          "adaPayoutWalletAddress": {
            "type": "string",
            "nullable": true
          },
          "usdcPayoutWalletAddress": {
            "type": "string",
            "nullable": true
          },
          "enableFiatPayments": {
            "type": "boolean"
          },
          "paymentGatewaySaleStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enableDecentralPayments": {
            "type": "boolean"
          },
          "policyLocks": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "royaltyAddress": {
            "type": "string",
            "nullable": true
          },
          "royaltyPercent": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lockslot": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "disableManualMintingbutton": {
            "type": "boolean"
          },
          "disableRandomSales": {
            "type": "boolean"
          },
          "disableSpecificSales": {
            "type": "boolean"
          },
          "twitterHandle": {
            "type": "string",
            "nullable": true
          },
          "nmkrAccountOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NmkrAccountOptionsTypes"
              }
            ]
          },
          "crossmintCollectiondId": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "blockchains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Blockchain"
            },
            "nullable": true
          },
          "solanaProjectDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaProjectDetails"
              }
            ],
            "nullable": true
          },
          "aptosProjectDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AptosProjectDetails"
              }
            ],
            "nullable": true
          },
          "solanaPayoutWalletAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NmkrAccountOptionsTypes": {
        "enum": [
          "none",
          "accountnecessary",
          "accountandkycnecessary"
        ],
        "type": "string"
      },
      "PolicyClass": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "privateVerifykey": {
            "type": "string",
            "nullable": true
          },
          "privateSigningkey": {
            "type": "string",
            "nullable": true
          },
          "policyScript": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricelistClass": {
        "type": "object",
        "properties": {
          "countNft": {
            "type": "integer",
            "format": "int64"
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "adaToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "priceInEur": {
            "type": "number",
            "format": "float"
          },
          "priceInUsd": {
            "type": "number",
            "format": "float"
          },
          "priceInJpy": {
            "type": "number",
            "format": "float"
          },
          "priceInBtc": {
            "type": "number",
            "format": "float"
          },
          "effectivedate": {
            "type": "string",
            "format": "date-time"
          },
          "additionalPriceInTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tokens"
            },
            "nullable": true
          },
          "paymentGatewayLinkForRandomNftSale": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "sendBackCentralPaymentInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "sendBackCentralPaymentInAda": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "priceInLovelaceCentralPayments": {
            "type": "integer",
            "format": "int64"
          },
          "adaToSendCentralPayments": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "priceInLamport": {
            "type": "integer",
            "format": "int64"
          },
          "solToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "priceInOctas": {
            "type": "integer",
            "format": "int64"
          },
          "aptToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "freeMint": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ReserveMultipleNftsClass": {
        "type": "object",
        "properties": {
          "lovelace": {
            "type": "integer",
            "format": "int64"
          },
          "reserveNfts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReserveNftsClass"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReserveNftsClass": {
        "type": "object",
        "properties": {
          "nftId": {
            "type": "integer",
            "format": "int32"
          },
          "tokencount": {
            "type": "integer",
            "format": "int64"
          },
          "multiplier": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ResultStates": {
        "enum": [
          "Ok",
          "Error"
        ],
        "type": "string"
      },
      "SolanaProjectDetails": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "collectionFamily": {
            "type": "string",
            "nullable": true
          },
          "collectionimage": {
            "type": "string",
            "nullable": true
          },
          "sellerFeeBasisPoints": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Tokens": {
        "type": "object",
        "properties": {
          "countToken": {
            "type": "integer",
            "format": "int64"
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "assetNameInHex": {
            "type": "string",
            "nullable": true
          },
          "multiplier": {
            "type": "integer",
            "format": "int64"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "assetName": {
            "type": "string",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "UploadMetadataClass": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadNftClass": {
        "type": "object",
        "properties": {
          "assetName": {
            "type": "string",
            "nullable": true
          },
          "previewImageNft": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftFile"
              }
            ],
            "nullable": true
          },
          "subfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NftFile"
            },
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "metadataCip68": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadNftResultClass": {
        "type": "object",
        "properties": {
          "nftId": {
            "type": "integer",
            "format": "int32"
          },
          "nftUid": {
            "type": "string",
            "nullable": true
          },
          "ipfsHashMainnft": {
            "type": "string",
            "nullable": true
          },
          "ipfsHashSubfiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "string",
            "nullable": true
          },
          "metadataAptos": {
            "type": "string",
            "nullable": true
          },
          "metadataSolana": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "description": "Enter the token via the following template: Bearer JWT\nExample:\nBearer ApikeyOrAccessToken",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearer": [ ]
    }
  ]
}