/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/CancelAddressReservation/{apikey}/{nftprojectid}/{paymentaddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cancels a address reservation (project id)
         * @description When you call this API, the reservation of all nfts dedicated to this address will released to free state. This function can be called, when a user closes his browser or when he hit on a "Cancel Reservation" Button
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    paymentaddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancellation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Address not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Address is not in active state - eg. already paid or already released to free */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CancelAddressReservation/{apikey}/{projectuid}/{paymentaddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cancels a address reservation (project uid)
         * @description When you call this API, the reservation of all nfts dedicated to this address will released to free state. This function can be called, when a user closes his browser or when he hit on a "Cancel Reservation" Button
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                    paymentaddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancellation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Address not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Address is not in active state - eg. already paid or already released to free */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAddress/{apikey}/{nftprojectid}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Checks an address for state changes (project id)
         * @description You can call this api to check if a user has paid to this particular address or if the address has expired. The reserved/sold NFTs will only filled after the amount was fully paid. This is for security reasons. In the reserved state, only the nft ids and tokenamount are submitted
         *
         *     IMPORTANT:
         *     This function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Apiresultclass with the information about the address incl. the assigned NFTs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CheckAddressResultClass"];
                        "application/json": components["schemas"]["CheckAddressResultClass"];
                        "text/json": components["schemas"]["CheckAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The address was not found in our database or not assiged to this project */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAddress/{apikey}/{projectuid}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Checks an address for state changes (project uid)
         * @description You can call this api to check if a user has paid to this particular address or if the address has expired. The reserved/sold NFTs will only filled after the amount was fully paid. This is for security reasons. In the reserved state, only the nft ids and tokenamount are submitted
         *
         *     IMPORTANT:
         *     This function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Apiresultclass with the information about the address incl. the assigned NFTs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CheckAddressResultClass"];
                        "application/json": components["schemas"]["CheckAddressResultClass"];
                        "text/json": components["schemas"]["CheckAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The address was not found in our database or not assiged to this project */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckWalletValidation/{apikey}/{validationuid}/{lovelace}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the result of a wallet validation
         * @description Here you can check the result of a wallet validation. The result are "notvalidated", "validated","expired"
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    validationuid: string;
                    lovelace: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the CheckWalletValidationResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CheckWalletValidationResultClass"];
                        "application/json": components["schemas"]["CheckWalletValidationResultClass"];
                        "text/json": components["schemas"]["CheckWalletValidationResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreateProject/{apikey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a new Project
         * @description WIth this Controller you can create a new project
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateProjectClass"];
                    "text/json": components["schemas"]["CreateProjectClass"];
                    "application/*+json": components["schemas"]["CreateProjectClass"];
                };
            };
            responses: {
                /** @description Returns the UploadNftResult Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CreateNewProjectResultClass"];
                        "application/json": components["schemas"]["CreateNewProjectResultClass"];
                        "text/json": components["schemas"]["CreateNewProjectResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description No Image Content was provided. Send a file either as Base64 or as Link or IPFS Hash */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description See the errormessage in the resultset for further information */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There is a conflict with the provided images. Send a file either as Base64 or as Link or IPFS Hash */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/DeleteNft/{apikey}/{nftprojectid}/{nftid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Deletes a nft from the database (nft and project id)
         * @description You can delete a nft, if it is not in sold or reserved state
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    nftid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Nft Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The nft was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Not Acceptable */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/DeleteNft/{apikey}/{nftuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Deletes a nft from the database (nft uid)
         * @description You can delete a nft, if it is not in sold or reserved state
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Nft Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The nft was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Not Acceptable */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForRandomNftSale/{apikey}/{nftprojectid}/{countnft}/{lovelace}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a random nft sale (project id)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    countnft: number;
                    lovelace: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description No more nft available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForRandomNftSale/{apikey}/{nftprojectid}/{countnft}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a random nft sale (price from pricelist) (project id)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    countnft: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description No more nft available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForRandomNftSale/{apikey}/{projectuid}/{countnft}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a random nft sale (price from pricelist) (project uid)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                    countnft: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description No more nft available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForRandomNftSale/{apikey}/{projectuid}/{countnft}/{lovelace}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a random nft sale (project id)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                    countnft: number;
                    lovelace: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description No more nft available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForSpecificNftSale/{apikey}/{nftprojectid}/{nftid}/{tokencount}/{lovelace}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a specific nft sale (no random distribution) (project and nft id)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    nftid: number;
                    tokencount: number;
                    lovelace: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The id of the nft is not found or not assigned to this project */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There is a conflict with the selected nft. See errormessage in the resultset */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForSpecificNftSale/{apikey}/{nftuid}/{tokencount}/{lovelace}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a specific nft sale (no random distribution)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftuid: string;
                    tokencount: number;
                    lovelace: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The id of the nft is not found or not assigned to this project */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There is a conflict with the selected nft. See errormessage in the resultset */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForSpecificNftSale/{apikey}/{nftprojectid}/{nftid}/{tokencount}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a specific nft sale (no random distribution) - price from pricelist or specific nft price (project and nft id)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    nftid: number;
                    tokencount: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The id of the nft is not found or not assigned to this project */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There is a conflict with the selected nft. See errormessage in the resultset */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForSpecificNftSale/{apikey}/{nftuid}/{tokencount}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for a specific nft sale (no random distribution) - price from pricelist or specific nft price (nft uid)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         *
         *     IMPORTANT:
         *     Please notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.
         *     Please do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftuid: string;
                    tokencount: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The id of the nft is not found or not assigned to this project */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There is a conflict with the selected nft. See errormessage in the resultset */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetAddressForSpecificNftSale/{apikey}/{nftprojectid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns an address for a multiple specific nfts sale (no random distribution) (project id)
         * @description When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.
         *     If the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.
         */
        post: {
            parameters: {
                query?: {
                    /** @description (Optional) A referer code */
                    referer?: string;
                    /** @description (Optional) A custom property which can be set. Will be returned at webhooks or checkaddress */
                    customproperty?: string;
                    optionalreceiveraddress?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReserveMultipleNftsClass"];
                    "text/json": components["schemas"]["ReserveMultipleNftsClass"];
                    "application/*+json": components["schemas"]["ReserveMultipleNftsClass"];
                };
            };
            responses: {
                /** @description Returns the GetPaymentAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetPaymentAddressResultClass"];
                        "application/json": components["schemas"]["GetPaymentAddressResultClass"];
                        "text/json": components["schemas"]["GetPaymentAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The id of the nft is not found or not assigned to this project */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There is a conflict with the selected nft. See errormessage in the resultset */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetCounts/{apikey}/{nftprojectid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the count of the sold, reserved and free nfts (project id)
         * @description You will get the count of all sold, reserved and free nfts of a particular project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the NftCountsClass */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftCountsClass"];
                        "application/json": components["schemas"]["NftCountsClass"];
                        "text/json": components["schemas"]["NftCountsClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetCounts/{apikey}/{projectuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the count of the sold, reserved and free nfts (project uid)
         * @description You will get the count of all sold, reserved and free nfts of a particular project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the NftCountsClass */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftCountsClass"];
                        "application/json": components["schemas"]["NftCountsClass"];
                        "text/json": components["schemas"]["NftCountsClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetNftDetails/{apikey}/{nftprojectid}/{nftname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about one nft specified by its name (nftproject id)
         * @description You will receive all information (fingerprint, ipfshash, etc.) about one nft with the submitted name
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    nftname: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Nft Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftDetailsClass"];
                        "application/json": components["schemas"]["NftDetailsClass"];
                        "text/json": components["schemas"]["NftDetailsClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The nft was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetNftDetailsById/{apikey}/{nftprojectid}/{nftid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about one nft specified by Id (project and nft id)
         * @description You will receive all information (fingerprint, ipfshash, etc.) about one nfts with the submitted id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    nftid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Nft Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftDetailsClass"];
                        "application/json": components["schemas"]["NftDetailsClass"];
                        "text/json": components["schemas"]["NftDetailsClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The nft was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetNftDetailsById/{apikey}/{nftuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about one nft specified by Id (nft uid)
         * @description You will receive all information (fingerprint, ipfshash, etc.) about one nfts with the submitted id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Nft Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftDetailsClass"];
                        "application/json": components["schemas"]["NftDetailsClass"];
                        "text/json": components["schemas"]["NftDetailsClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The nft was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetNfts/{apikey}/{nftprojectid}/{state}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about all nfts with a specific state. *** DEPRECATED - use the paged version ***
         * @description You will receive all information (fingerprint, ipfshash, etc.) about the nfts within a specific state.
         *     State "all" lists all available nft in this project. The other states are: "free", "reserved", "sold" and "error"
         *     *** DEPRECATED - use the paged version ***
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    state: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a List of the NFT Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NFT"][];
                        "application/json": components["schemas"]["NFT"][];
                        "text/json": components["schemas"]["NFT"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The state was not known - possible states are: free, reserved, sold, error and all */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetNfts/{apikey}/{nftprojectid}/{state}/{count}/{page}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about nfts with a specific state with Pagination support. (project id)
         * @description You will receive all information (fingerprint, ipfshash, etc.) about the nfts within a specific state.
         *     State "all" lists all available nft in this project. The other states are: "free", "reserved", "sold" and "error"
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) The sort order of the result. Possible values are: id (default),id_desc (descending order), selldate (on sold nfts) and selldate_desc (descending order) */
                    orderby?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    state: string;
                    count: number;
                    page: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a List of the NFT Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NFT"][];
                        "application/json": components["schemas"]["NFT"][];
                        "text/json": components["schemas"]["NFT"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The state was not known - possible states are: free, reserved, sold, error and all */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetNfts/{apikey}/{projectuid}/{state}/{count}/{page}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about nfts with a specific state with Pagination support. (project uid)
         * @description You will receive all information (fingerprint, ipfshash, etc.) about the nfts within a specific state.
         *     State "all" lists all available nft in this project. The other states are: "free", "reserved", "sold" and "error"
         */
        get: {
            parameters: {
                query?: {
                    /** @description (Optional) The sort order of the result. Possible values are: id (default),id_desc (descending order), selldate (on sold nfts) and selldate_desc (descending order) */
                    orderby?: string;
                };
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                    state: string;
                    count: number;
                    page: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a List of the NFT Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NFT"][];
                        "application/json": components["schemas"]["NFT"][];
                        "text/json": components["schemas"]["NFT"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The projectuid was not found */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetPricelist/{apikey}/{nftprojectid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the actual valid pricelist for this project (project id)
         * @description You will get the predefined prices for one or more nf
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns an array of the PricelistClass */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PricelistClass"][];
                        "application/json": components["schemas"]["PricelistClass"][];
                        "text/json": components["schemas"]["PricelistClass"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetPricelist/{apikey}/{projectuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the actual valid pricelist for this project (project uid)
         * @description You will get the predefined prices for one or more nf
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns an array of the PricelistClass */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PricelistClass"][];
                        "application/json": components["schemas"]["PricelistClass"][];
                        "text/json": components["schemas"]["PricelistClass"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetProjectDetails/{apikey}/{customerid}/{nftprojectid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about a project
         * @description You will receive all information about this project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    customerid: number;
                    nftprojectid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the NftProjectsDetails Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftProjectsDetails"];
                        "application/json": components["schemas"]["NftProjectsDetails"];
                        "text/json": components["schemas"]["NftProjectsDetails"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The nft was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetProjectDetails/{apikey}/{projectuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns detail information about a project
         * @description You will receive all information about this project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    projectuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the NftProjectsDetails Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftProjectsDetails"];
                        "application/json": components["schemas"]["NftProjectsDetails"];
                        "text/json": components["schemas"]["NftProjectsDetails"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The nft was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/GetWalletValidationAddress/{apikey}/{validationname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an address for wallet validation
         * @description When you call this API, you will receive an address for a wallet validation. The user can send any ada to this address and the ada (and tokens) will sent back to the sender. With the function CheckWalletValidation you can check the state of the address
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    validationname: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the GetWalletValidationAddressResultClass Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetWalletValidationAddressResultClass"];
                        "application/json": components["schemas"]["GetWalletValidationAddressResultClass"];
                        "text/json": components["schemas"]["GetWalletValidationAddressResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ListProjects/{apikey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists all your projects
         * @description You will receive a list with all of your projects
         *
         *     IMPORTANT:
         *     This function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the NftProjectsDetails Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftProjectsDetails"][];
                        "application/json": components["schemas"]["NftProjectsDetails"][];
                        "text/json": components["schemas"]["NftProjectsDetails"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The apikey or the projects where not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The provided informations are not valid for this request */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ListProjects/{apikey}/{count}/{page}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists all your projects with pagination
         * @description You will receive a list with all of your projects
         *
         *     IMPORTANT:
         *     This function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    count: number;
                    page: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the NftProjectsDetails Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftProjectsDetails"][];
                        "application/json": components["schemas"]["NftProjectsDetails"][];
                        "text/json": components["schemas"]["NftProjectsDetails"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The apikey or the projects where not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The provided informations are not valid for this request */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ListProjects/{apikey}/{customerid}/{count}/{page}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists all your projects with pagination
         * @description You will receive a list with all of your projects
         *
         *     IMPORTANT:
         *     This function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    customerid: number;
                    count: number;
                    page: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the NftProjectsDetails Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftProjectsDetails"][];
                        "application/json": components["schemas"]["NftProjectsDetails"][];
                        "text/json": components["schemas"]["NftProjectsDetails"][];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The apikey or the projects where not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The provided informations are not valid for this request */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/MintAndSendRandom/{apikey}/{nftprojectid}/{countnft}/{receiveraddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Mints random Nfts and sends it to an Address
         * @description When you call this API, random NFTs will be selected, minted and send to an ada address. You will need ADA in your Account for the transaction and minting costs.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    countnft: number;
                    receiveraddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Nft Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["MintAndSendResultClass"];
                        "application/json": components["schemas"]["MintAndSendResultClass"];
                        "text/json": components["schemas"]["MintAndSendResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too less ADA in your account. Fill up ADA first before try to mint and send */
                402: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description No more nft available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The receiveraddress is not a valid cardano address or a valid adahandle */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There are pending transactions on the sender address (your account address). Please wait a second */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/MintAndSendSpecific/{apikey}/{nftprojectid}/{nftid}/{tokencount}/{receiveraddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Mints a specific Nft and sends it to an Address
         * @description When you call this API, a specific NFT will be minted and send to an ada address. You will need ADA in your Account for the transaction and minting costs.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    nftid: number;
                    tokencount: number;
                    receiveraddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the Nft Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["MintAndSendResultClass"];
                        "application/json": components["schemas"]["MintAndSendResultClass"];
                        "text/json": components["schemas"]["MintAndSendResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Too less ADA in your account. Fill up ADA first before try to mint and send */
                402: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description NFT no more available (already sold) */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The receiveraddress is not a valid cardano address or a valid ada handle */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There are pending transactions on the sender address (your account address). Please wait a second */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Internal server error - see the errormessage in the result */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/UpdateMetadata/{apikey}/{nftprojectid}/{nftid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Updates the Metadata for one specific NFT
         * @description With this API you can update the Metadata Override for one specific NFT
         *     If you leave the field blank, the Metadata override will be deleted and the Metadata from the project will be used.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                    nftid: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UploadMetadataClass"];
                    "text/json": components["schemas"]["UploadMetadataClass"];
                    "application/*+json": components["schemas"]["UploadMetadataClass"];
                };
            };
            responses: {
                /** @description Returns the Nftdetails Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NftDetailsClass"];
                        "application/json": components["schemas"]["NftDetailsClass"];
                        "text/json": components["schemas"]["NftDetailsClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description The NFT was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description See the errormessage in the resultset for further information */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/UploadNft/{apikey}/{nftprojectid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a File to a project and pin it to IPFS
         * @description With this API you can upload a file to IPFS and add it to a project. You can upload the file as BASE64 Content or as URL Link or as IPFS Hash.
         *     If you submit Metadata, this Metadata will be used instead of the Metadatatemplate from the project. You can either submit Metadata or MetadataPlaceholder, but not both (because it makes no sense).
         *     The Metadata field is optional and if you dont use it, it will use the Template from your project. It is poosible to mix both versions in one project. You can have one nft with own metadata and other nfts
         *     with the template.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    apikey: string;
                    nftprojectid: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UploadNftClass"];
                    "text/json": components["schemas"]["UploadNftClass"];
                    "application/*+json": components["schemas"]["UploadNftClass"];
                };
            };
            responses: {
                /** @description Returns the UploadNftResult Class */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UploadNftResultClass"];
                        "application/json": components["schemas"]["UploadNftResultClass"];
                        "text/json": components["schemas"]["UploadNftResultClass"];
                    };
                };
                /** @description The access was denied. (Wrong or expired APIKEY, wrong projectid etc.) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description No Image Content was provided. Send a file either as Base64 or as Link or IPFS Hash */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description See the errormessage in the resultset for further information */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description There is a conflict with the provided images. Send a file either as Base64 or as Link or IPFS Hash */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
                /** @description Internal server error - see the errormessage in the resultset */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiErrorResultClass"];
                        "application/json": components["schemas"]["ApiErrorResultClass"];
                        "text/json": components["schemas"]["ApiErrorResultClass"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiErrorResultClass: {
            resultState?: components["schemas"]["ResultStates"];
            errorMessage?: string | null;
            /** Format: int32 */
            errorCode?: number;
            innerErrorMessage?: string | null;
        };
        AptosProjectDetails: {
            collectionImage?: string | null;
            collectionName?: string | null;
        };
        /** @enum {string} */
        Blockchain: "Cardano" | "Solana" | "Aptos" | "Hedara" | "Polygon" | "Ethereum" | "Bitcoin" | "Unknown";
        CheckAddressResultClass: {
            state?: string | null;
            /**
             * Format: int64
             * @deprecated
             */
            lovelace?: number;
            /** Format: int64 */
            receivedAptosOctas?: number;
            /** Format: int64 */
            receivedSolanaLamports?: number;
            /** Format: int64 */
            receivedCardanoLovelace?: number;
            coin?: components["schemas"]["Coin"];
            /** Format: int64 */
            hasToPay?: number;
            additionalPriceInTokens?: components["schemas"]["Tokens"][] | null;
            /** Format: date-time */
            payDateTime?: string | null;
            /** Format: date-time */
            expiresDateTime?: string | null;
            transaction?: string | null;
            senderAddress?: string | null;
            reservedNft?: components["schemas"]["NFT"][] | null;
            rejectReason?: string | null;
            rejectParameter?: string | null;
            /** Format: int64 */
            stakeReward?: number | null;
            /** Format: int64 */
            discount?: number | null;
            customProperty?: string | null;
            /** Format: int64 */
            tokenReward?: number | null;
            /** Format: int64 */
            countNftsOrTokens?: number;
            reservationType?: string | null;
        };
        CheckWalletValidationResultClass: {
            validationResult?: string | null;
            senderAddress?: string | null;
            stakeAddress?: string | null;
            /** Format: int64 */
            lovelace?: number;
            validationaddress?: string | null;
            /** Format: date-time */
            validUntil?: string;
            validationName?: string | null;
        };
        /** @enum {string} */
        Coin: "ADA" | "SOL" | "USDC" | "ETH" | "USD" | "EUR" | "JPY" | "APT" | "BTC" | "HBAR" | "SONY" | "MATIC";
        CreateNewProjectResultClass: {
            /** Format: int32 */
            projectId?: number;
            metadata?: string | null;
            policyId?: string | null;
            policyScript?: string | null;
            /** Format: date-time */
            policyExpiration?: string | null;
            uid?: string | null;
            metadataTemplateAptos?: string | null;
            metadataTemplateSolana?: string | null;
            enabledCoins?: string | null;
            solanaUpdateAuthority?: string | null;
            aptosCollectionAddress?: string | null;
            /** Format: date-time */
            created?: string | null;
        };
        CreateProjectClass: {
            projectname?: string | null;
            description?: string | null;
            projecturl?: string | null;
            tokennamePrefix?: string | null;
            policyExpires?: boolean;
            /** Format: date-time */
            policyLocksDateTime?: string | null;
            payoutWalletaddress?: string | null;
            /** Format: int64 */
            maxNftSupply?: number;
            policy?: components["schemas"]["PolicyClass"] | null;
            metadata?: string | null;
            /** Format: int32 */
            addressExpiretime?: number;
        };
        GetPaymentAddressResultClass: {
            paymentAddress?: string | null;
            /** Format: int32 */
            paymentAddressId?: number;
            /** Format: date-time */
            expires?: string;
            readonly adaToSend?: string | null;
            readonly solToSend?: string | null;
            readonly aptToSend?: string | null;
            debug?: string | null;
            /** Format: double */
            priceInEur?: number;
            /** Format: double */
            priceInUsd?: number;
            /** Format: double */
            priceInJpy?: number;
            /** Format: double */
            priceInBtc?: number;
            /** Format: date-time */
            effectivedate?: string;
            /** Format: int64 */
            priceInLovelace?: number;
            additionalPriceInTokens?: components["schemas"]["Tokens"][] | null;
            /** Format: int64 */
            sendbackToUser?: number;
            revervationtype?: string | null;
            currency?: string | null;
            /** Format: int64 */
            priceInLamport?: number;
            /** Format: int64 */
            priceInOcta?: number;
            /** Format: int64 */
            priceInSatoshi?: number;
        };
        GetWalletValidationAddressResultClass: {
            validationUId?: string | null;
            address?: string | null;
            /** Format: date-time */
            expires?: string;
            /** Format: int64 */
            lovelace?: number;
        };
        MetadataPlaceholderClass: {
            name?: string | null;
            value?: string | null;
        };
        MintAndSendResultClass: {
            /** Format: int32 */
            mintAndSendId?: number | null;
            sendedNft?: components["schemas"]["NFT"][] | null;
        };
        NFT: {
            /** Format: int32 */
            id?: number;
            uid?: string | null;
            name?: string | null;
            displayname?: string | null;
            detaildata?: string | null;
            ipfsLink?: string | null;
            gatewayLink?: string | null;
            state?: string | null;
            minted?: boolean;
            policyId?: string | null;
            assetId?: string | null;
            assetname?: string | null;
            fingerprint?: string | null;
            initialMintTxHash?: string | null;
            series?: string | null;
            /** Format: int64 */
            tokenamount?: number;
            /** Format: int64 */
            price?: number | null;
            /** Format: date-time */
            selldate?: string | null;
            paymentGatewayLinkForSpecificSale?: string | null;
            /** Format: int64 */
            priceSolana?: number | null;
            /** Format: int64 */
            priceAptos?: number | null;
        };
        NftCountsClass: {
            /** Format: int64 */
            nftTotal?: number;
            /** Format: int64 */
            sold?: number;
            /** Format: int64 */
            free?: number;
            /** Format: int64 */
            reserved?: number;
            /** Format: int64 */
            error?: number;
            /** Format: int64 */
            blocked?: number;
            /** Format: int64 */
            totalTokens?: number;
            /** Format: int64 */
            totalBlocked?: number;
            /** Format: int64 */
            unknownOrBurnedState?: number;
        };
        NftDetailsClass: {
            /** Format: int32 */
            id?: number;
            ipfshash?: string | null;
            state?: string | null;
            name?: string | null;
            displayname?: string | null;
            detaildata?: string | null;
            minted?: boolean;
            receiveraddress?: string | null;
            /** Format: date-time */
            selldate?: string | null;
            soldby?: string | null;
            /** Format: date-time */
            reserveduntil?: string | null;
            policyid?: string | null;
            assetid?: string | null;
            assetname?: string | null;
            fingerprint?: string | null;
            initialminttxhash?: string | null;
            title?: string | null;
            series?: string | null;
            ipfsGatewayAddress?: string | null;
            metadata?: string | null;
            /** Format: int64 */
            singlePrice?: number | null;
            uid?: string | null;
            paymentGatewayLinkForSpecificSale?: string | null;
            /** Format: int64 */
            sendBackCentralPaymentInLovelace?: number | null;
            /** Format: int64 */
            priceInLovelaceCentralPayments?: number | null;
            uploadSource?: string | null;
            /** Format: int64 */
            priceInLamportCentralPayments?: number | null;
            /** Format: int64 */
            singlePriceSolana?: number | null;
            /** Format: int64 */
            priceInOctsCentralPayments?: number | null;
            mintedOnBlockchain?: components["schemas"]["Blockchain"];
            /** Format: int64 */
            mintingfees?: number | null;
        };
        NftFile: {
            mimetype?: string | null;
            fileFromBase64?: string | null;
            fileFromsUrl?: string | null;
            fileFromIPFS?: string | null;
            description?: string | null;
            displayname?: string | null;
            metadataPlaceholder?: components["schemas"]["MetadataPlaceholderClass"][] | null;
        };
        NftProjectsDetails: {
            /** Format: int32 */
            id?: number;
            projectname?: string | null;
            projecturl?: string | null;
            projectLogo?: string | null;
            state?: string | null;
            /** Format: int64 */
            free?: number;
            /** Format: int64 */
            sold?: number;
            /** Format: int64 */
            reserved?: number;
            /** Format: int64 */
            total?: number;
            /** Format: int64 */
            blocked?: number;
            /** Format: int64 */
            totalBlocked?: number;
            /** Format: int64 */
            totalTokens?: number;
            /** Format: int64 */
            error?: number;
            /** Format: int64 */
            unknownOrBurnedState?: number;
            uid?: string | null;
            /** Format: int64 */
            maxTokenSupply?: number;
            description?: string | null;
            /** Format: int32 */
            addressReservationTime?: number;
            policyId?: string | null;
            enableCrossSaleOnPaymentGateway?: boolean;
            adaPayoutWalletAddress?: string | null;
            usdcPayoutWalletAddress?: string | null;
            enableFiatPayments?: boolean;
            /** Format: date-time */
            paymentGatewaySaleStart?: string | null;
            enableDecentralPayments?: boolean;
            /** Format: date-time */
            policyLocks?: string | null;
            royaltyAddress?: string | null;
            /** Format: float */
            royaltyPercent?: number | null;
            /** Format: int64 */
            lockslot?: number | null;
            disableManualMintingbutton?: boolean;
            disableRandomSales?: boolean;
            disableSpecificSales?: boolean;
            twitterHandle?: string | null;
            nmkrAccountOptions?: components["schemas"]["NmkrAccountOptionsTypes"];
            crossmintCollectiondId?: string | null;
            /** Format: date-time */
            created?: string;
            blockchains?: components["schemas"]["Blockchain"][] | null;
            solanaProjectDetails?: components["schemas"]["SolanaProjectDetails"] | null;
            aptosProjectDetails?: components["schemas"]["AptosProjectDetails"] | null;
            solanaPayoutWalletAddress?: string | null;
        };
        /** @enum {string} */
        NmkrAccountOptionsTypes: "none" | "accountnecessary" | "accountandkycnecessary";
        PolicyClass: {
            policyId?: string | null;
            privateVerifykey?: string | null;
            privateSigningkey?: string | null;
            policyScript?: string | null;
        };
        PricelistClass: {
            /** Format: int64 */
            countNft?: number;
            /** Format: int64 */
            priceInLovelace?: number;
            readonly adaToSend?: string | null;
            /** Format: float */
            priceInEur?: number;
            /** Format: float */
            priceInUsd?: number;
            /** Format: float */
            priceInJpy?: number;
            /** Format: float */
            priceInBtc?: number;
            /** Format: date-time */
            effectivedate?: string;
            additionalPriceInTokens?: components["schemas"]["Tokens"][] | null;
            paymentGatewayLinkForRandomNftSale?: string | null;
            currency?: string | null;
            /** Format: int64 */
            sendBackCentralPaymentInLovelace?: number;
            readonly sendBackCentralPaymentInAda?: string | null;
            /** Format: int64 */
            priceInLovelaceCentralPayments?: number;
            readonly adaToSendCentralPayments?: string | null;
            /** Format: int64 */
            priceInLamport?: number;
            readonly solToSend?: string | null;
            /** Format: date-time */
            validFrom?: string | null;
            /** Format: date-time */
            validTo?: string | null;
            /** Format: int64 */
            priceInOctas?: number;
            readonly aptToSend?: string | null;
            freeMint?: boolean;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        ReserveMultipleNftsClass: {
            /** Format: int64 */
            lovelace?: number;
            reserveNfts?: components["schemas"]["ReserveNftsClass"][] | null;
        };
        ReserveNftsClass: {
            /** Format: int32 */
            nftId?: number;
            /** Format: int64 */
            tokencount?: number;
            /** Format: int64 */
            multiplier?: number;
        };
        /** @enum {string} */
        ResultStates: "Ok" | "Error";
        SolanaProjectDetails: {
            symbol?: string | null;
            collectionFamily?: string | null;
            collectionimage?: string | null;
            /** Format: int32 */
            sellerFeeBasisPoints?: number | null;
        };
        Tokens: {
            /** Format: int64 */
            countToken?: number;
            policyId?: string | null;
            assetNameInHex?: string | null;
            /** Format: int64 */
            multiplier?: number;
            /** Format: int64 */
            totalCount?: number;
            assetName?: string | null;
            /** Format: int64 */
            decimals?: number;
        };
        UploadMetadataClass: {
            metadata?: string | null;
        };
        UploadNftClass: {
            assetName?: string | null;
            previewImageNft?: components["schemas"]["NftFile"] | null;
            subfiles?: components["schemas"]["NftFile"][] | null;
            metadata?: string | null;
            metadataCip68?: string | null;
        };
        UploadNftResultClass: {
            /** Format: int32 */
            nftId?: number;
            nftUid?: string | null;
            ipfsHashMainnft?: string | null;
            ipfsHashSubfiles?: string[] | null;
            metadata?: string | null;
            assetId?: string | null;
            metadataAptos?: string | null;
            metadataSolana?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
