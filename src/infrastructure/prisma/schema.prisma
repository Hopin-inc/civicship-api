// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// debian-openssl-3.0.x for CloudRun, linux-arm64-openssl-3.0.x for local

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "typedSql", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "../../../docs/ERD.md"
  includeRelationFromFields = true
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../../../docs"
}

generator fabbrica {
  provider    = "prisma-fabbrica"
  output      = "factories/__generated__"
  noTranspile = true
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PublishStatus {
  PUBLIC
  COMMUNITY_INTERNAL
  PRIVATE
}

enum Source {
  INTERNAL
  EXTERNAL
}

// ------------------------------ General (Image) ------------------------------

model Image {
  id          String  @id @default(cuid())
  isPublic    Boolean @map("is_public")
  url         String
  originalUrl String? @map("original_url")
  bucket      String
  folderPath  String  @map("folder_path")
  filename    String
  size        Int?
  width       Int?
  height      Int?
  mime        String
  ext         String
  alt         String?
  caption     String?
  strapiId    Int?    @map("strapi_id")

  users       User[]
  communities Community[]
  articles    Article[]
  places      Place[]

  opportunities  Opportunity[]   @relation("t_images_on_opportunities")
  participations Participation[] @relation("t_images_on_participations")
  utilities      Utility[]       @relation("t_images_on_utilities")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_images")
}

// ------------------------------ Geography (State & City) ------------------------------

model State {
  code String

  name        String
  countryCode String @map("country_code") @db.Char(2)

  cities City[]

  @@id([code, countryCode])
  @@map("m_states")
}

model City {
  code String @id

  name        String
  stateCode   String @map("state_code")
  countryCode String @map("country_code") @db.Char(2)

  state  State   @relation(fields: [stateCode, countryCode], references: [code, countryCode], onDelete: Restrict)
  places Place[]

  @@map("m_cities")
}

// ------------------------------ Place Domain ------------------------------

model Place {
  id String @id @default(cuid())

  name      String
  address   String
  latitude  Decimal
  longitude Decimal

  imageId String? @map("image_id")
  image   Image?  @relation(fields: [imageId], references: [id])

  isManual      Boolean @map("is_manual")
  googlePlaceId String? @map("google_place_id")
  mapLocation   Json?   @map("map_location")

  cityCode String @map("city_code")
  city     City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)

  opportunities Opportunity[]

  currentPublicOpportunityCount PlacePublicOpportunityCountView?
  accumulatedParticipants       PlaceAccumulatedParticipantsView?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_places")
}

view PlacePublicOpportunityCountView {
  placeId String @id @map("place_id")
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Restrict)

  currentPublicCount Int @map("current_public_count")

  @@map("v_place_public_opportunity_count")
}

view PlaceAccumulatedParticipantsView {
  placeId String @id @map("place_id")
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Restrict)

  accumulatedParticipants Int @map("accumulated_participants")

  @@map("v_place_accumulated_participants")
}

// ------------------------------ Community Domain ------------------------------

model Community {
  id String @id @default(cuid())

  name      String
  pointName String @map("point_name")

  bio           String?
  establishedAt DateTime? @map("established_at")
  website       String?

  imageId String? @map("image_id")
  image   Image?  @relation(fields: [imageId], references: [id])

  config CommunityConfig?
  places Place[]

  identities  Identity[]
  memberships Membership[]
  wallets     Wallet[]

  utilities      Utility[]
  opportunities  Opportunity[]
  participations Participation[]
  articles       Article[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_communities")
}

model CommunityConfig {
  id          String    @id @default(cuid())
  communityId String    @unique @map("community_id")
  community   Community @relation(fields: [communityId], references: [id])

  firebaseConfig CommunityFirebaseConfig?
  lineConfig     CommunityLineConfig?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_community_configs")
}

model CommunityFirebaseConfig {
  id String @id @default(cuid())

  configId String           @unique @map("config_id")
  config   CommunityConfig? @relation(fields: [configId], references: [id])

  tenantId String @map("tenant_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_community_firebase_configs")
}

model CommunityLineConfig {
  id String @id @default(cuid())

  configId String           @unique @map("config_id")
  config   CommunityConfig? @relation(fields: [configId], references: [id])

  channelId     String @map("channel_id")
  channelSecret String @map("channel_secret")
  accessToken   String @map("access_token")

  liffId      String @map("liff_id")
  liffBaseUrl String @map("liff_base_url")

  richMenus CommunityLineRichMenuConfig[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_community_line_configs")
}

model CommunityLineRichMenuConfig {
  id       String              @id @default(cuid())
  configId String              @map("config_id")
  config   CommunityLineConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  type       LineRichMenuType
  richMenuId String           @map("rich_menu_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([configId, type])
  @@map("t_community_line_rich_menus")
}

enum LineRichMenuType {
  ADMIN
  USER
  PUBLIC
}

// ------------------------------ User Domain ------------------------------

model User {
  id String @id @default(cuid())

  name              String
  slug              String
  bio               String?
  sysRole           SysRole           @default(USER) @map("sys_role")
  currentPrefecture CurrentPrefecture @map("current_prefecture")
  phoneNumber       String?           @map("phone_number")

  urlWebsite   String? @map("url_website")
  urlX         String? @map("url_x")
  urlFacebook  String? @map("url_facebook")
  urlInstagram String? @map("url_instagram")
  urlYoutube   String? @map("url_youtube")
  urlTiktok    String? @map("url_tiktok")

  imageId String? @map("image_id")
  image   Image?  @relation(fields: [imageId], references: [id])

  identities          Identity[]
  nftWallet           NftWallet?
  didIssuanceRequests DidIssuanceRequest[]
  vcIssuanceRequests  VcIssuanceRequest[]

  memberships           Membership[]
  membershipChangedByMe MembershipHistory[]
  wallets               Wallet[]

  utiltyOwnedByMe         Utility[]
  ticketIssuedByMe        TicketIssuer[]
  ticketStatusChangedByMe TicketStatusHistory[]

  opportunitiesCreatedByMe       Opportunity[]
  reservationsAppliedByMe        Reservation[]
  reservationStatusChangedByMe   ReservationHistory[]
  participations                 Participation[]
  participationStatusChangedByMe ParticipationStatusHistory[]
  evaluationsEvaluatedByMe       Evaluation[]
  evaluationCreatedByMe          EvaluationHistory[]
  transactionsCreatedByMe        Transaction[]

  articlesWrittenByMe Article[] @relation("t_author_users_on_articles")
  articlesAboutMe     Article[] @relation("t_related_users_on_articles")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([name])
  @@map("t_users")
}

enum SysRole {
  SYS_ADMIN
  USER
}

enum CurrentPrefecture {
  KAGAWA
  TOKUSHIMA
  KOCHI
  EHIME
  OUTSIDE_SHIKOKU
  UNKNOWN
}

model Identity {
  uid      String           @id
  platform IdentityPlatform

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id])

  authToken      String?   @map("auth_token") @db.Text
  refreshToken   String?   @map("refresh_token") @db.Text
  tokenExpiresAt DateTime? @map("token_expires_at")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([userId, platform, communityId])
  @@map("t_identities")
}

enum IdentityPlatform {
  LINE
  FACEBOOK
  PHONE
}

enum DidIssuanceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED

  @@map("DIDIssuanceStatus")
}

model DidIssuanceRequest {
  id String @id @default(cuid())

  status       DidIssuanceStatus @default(PENDING)
  jobId        String?           @map("job_id")
  didValue     String?           @map("did_value")
  errorMessage String?           @map("error_message")
  retryCount   Int               @default(0) @map("retry_count")

  requestedAt DateTime  @default(now()) @map("requested_at")
  processedAt DateTime? @map("processed_at")
  completedAt DateTime? @map("completed_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([userId])
  @@map("t_did_issuance_requests")
}

enum VcIssuanceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED

  @@map("VCIssuanceStatus")
}

model VcIssuanceRequest {
  id String @id @default(cuid())

  status           VcIssuanceStatus @default(PENDING)
  jobId            String?          @map("job_id")
  vcRecordId       String?          @map("vc_record_id")
  claims           Json
  credentialFormat String?          @map("credential_format")
  schemaId         String?          @map("schema_id")
  errorMessage     String?          @map("error_message")
  retryCount       Int              @default(0) @map("retry_count")

  requestedAt DateTime  @default(now()) @map("requested_at")
  processedAt DateTime? @map("processed_at")
  completedAt DateTime? @map("completed_at")

  evaluationId String     @unique @map("evaluation_id")
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([userId])
  @@map("t_vc_issuance_requests")
}

// ------------------------------ Membership Domain ------------------------------

model Membership {
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  headline String?
  bio      String?

  status MembershipStatus
  reason MembershipStatusReason
  role   Role                   @default(MEMBER)

  histories MembershipHistory[]

  opportunityHostedCountView MembershipHostedOpportunityCountView?
  participationGeoViews      MembershipParticipationGeoView[]
  participationCountViews    MembershipParticipationCountView[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, communityId])
  @@map("t_memberships")
}

view MembershipParticipationGeoView {
  userId      String @map("user_id")
  communityId String @map("community_id")

  type ParticipationType

  placeId    String  @map("place_id")
  placeName  String? @map("place_name")
  placeImage String? @map("place_image")

  address   String
  latitude  Decimal
  longitude Decimal

  membership Membership @relation(fields: [userId, communityId], references: [userId, communityId])

  @@id([userId, communityId, placeId])
  @@map("v_membership_participation_geo")
}

view MembershipParticipationCountView {
  userId      String @map("user_id")
  communityId String @map("community_id")

  type       ParticipationType
  totalCount Int               @map("total_count")
  membership Membership        @relation(fields: [userId, communityId], references: [userId, communityId])

  @@id([userId, communityId, type])
  @@map("v_membership_participation_count")
}

view MembershipHostedOpportunityCountView {
  userId      String @map("user_id")
  communityId String @map("community_id")

  totalCount Int        @map("total_count")
  membership Membership @relation(fields: [userId, communityId], references: [userId, communityId])

  @@id([userId, communityId])
  @@map("v_membership_hosted_opportunity_count")
}

enum Role {
  OWNER
  MANAGER
  MEMBER
}

enum MembershipStatus {
  PENDING
  JOINED
  LEFT
}

enum MembershipStatusReason {
  CREATED_COMMUNITY

  INVITED
  CANCELED_INVITATION
  ACCEPTED_INVITATION
  DECLINED_INVITATION

  WITHDRAWN
  REMOVED

  ASSIGNED
}

enum ParticipationType {
  HOSTED
  PARTICIPATED
}

model MembershipHistory {
  id String @id @default(cuid())

  role   Role                   @default(MEMBER)
  status MembershipStatus
  reason MembershipStatusReason

  userId      String     @map("user_id")
  communityId String     @map("community_id")
  membership  Membership @relation(fields: [userId, communityId], references: [userId, communityId], onDelete: Cascade)

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("t_membership_histories")
}

model Wallet {
  id String @id @default(cuid())

  type WalletType @default(MEMBER)

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  currentPointView     CurrentPointView?
  accumulatedPointView AccumulatedPointView?

  fromTransactions Transaction[] @relation("from_wallet")
  toTransactions   Transaction[] @relation("to_wallet")
  tickets          Ticket[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([communityId, userId])
  @@map("t_wallets")
}

view CurrentPointView {
  walletId String @id @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id])

  currentPoint BigInt @map("current_point") @db.BigInt

  @@map("mv_current_points")
}

view AccumulatedPointView {
  walletId String @id @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id])

  accumulatedPoint BigInt @map("accumulated_point") @db.BigInt

  @@map("mv_accumulated_points")
}

enum WalletType {
  COMMUNITY
  MEMBER
}

// ------------------------------ Article Domain ------------------------------

model Article {
  id String @id @default(cuid())

  title         String
  introduction  String
  category      ArticleCategory
  publishStatus PublishStatus   @default(PUBLIC) @map("publish_status")
  body          String
  publishedAt   DateTime        @map("published_at")

  thumbnailId String? @map("thumbnail_id")
  thumbnail   Image?  @relation(fields: [thumbnailId], references: [id], onDelete: SetNull)

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  authors       User[]        @relation("t_author_users_on_articles")
  relatedUsers  User[]        @relation("t_related_users_on_articles")
  opportunities Opportunity[] @relation("t_opportunities_on_articles")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([communityId, publishStatus])
  @@map("t_articles")
}

enum ArticleCategory {
  ACTIVITY_REPORT
  INTERVIEW
}

// ------------------------------ Opportunity Domain ------------------------------

model Opportunity {
  id String @id @default(cuid())

  publishStatus   PublishStatus @default(PUBLIC) @map("publish_status")
  requireApproval Boolean       @default(false) @map("require_approval")

  title       String
  category    OpportunityCategory
  description String
  body        String?
  images      Image[]             @relation("t_images_on_opportunities")

  pointsToEarn      Int?      @map("points_to_earn")
  feeRequired       Int?      @map("fee_required")
  pointsRequired    Int?      @map("points_required")
  requiredUtilities Utility[] @relation("t_required_opportunities_on_utilities")

  slots                      OpportunitySlot[]
  earliestReservableSlotView EarliestReservableSlotView?
  accumulatedParticipants    OpportunityAccumulatedParticipantsView?

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)

  placeId String? @map("place_id")
  place   Place?  @relation(fields: [placeId], references: [id], onDelete: Restrict)

  articles Article[] @relation("t_opportunities_on_articles")

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([communityId, publishStatus, category])
  @@map("t_opportunities")
}

enum OpportunityCategory {
  QUEST
  EVENT
  ACTIVITY
}

view EarliestReservableSlotView {
  opportunityId String      @id @map("opportunity_id")
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])

  earliestReservableAt DateTime? @map("earliest_reservable_at")

  @@map("v_earliest_reservable_slot")
}

view OpportunityAccumulatedParticipantsView {
  opportunityId String      @id @map("opportunity_id")
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  accumulatedParticipants Int @map("accumulated_participants")

  @@map("v_opportunity_accumulated_participants")
}

model OpportunitySlot {
  id String @id @default(cuid())

  hostingStatus OpportunitySlotHostingStatus @default(SCHEDULED) @map("hosting_status")

  startsAt DateTime @map("starts_at")
  endsAt   DateTime @map("ends_at")

  capacity              Int?
  remainingCapacityView RemainingCapacityView?

  opportunityId String      @map("opportunity_id")
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  reservations   Reservation[]
  participations Participation[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([opportunityId, startsAt])
  @@map("t_opportunity_slots")
}

enum OpportunitySlotHostingStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

view RemainingCapacityView {
  slotId String          @id @map("slot_id")
  slot   OpportunitySlot @relation(fields: [slotId], references: [id])

  remainingCapacity Int? @map("remaining_capacity")

  @@map("v_slot_remaining_capacity")
}

// ------------------------------ Reservation Domain ------------------------------

model Reservation {
  id String @id @default(cuid())

  opportunitySlotId String          @map("opportunity_slot_id")
  opportunitySlot   OpportunitySlot @relation(fields: [opportunitySlotId], references: [id], onDelete: Cascade)

  comment                   String?
  status                    ReservationStatus @default(APPLIED)
  participantCountWithPoint Int               @default(0) @map("participant_count_with_point")
  participations            Participation[]

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  histories    ReservationHistory[]
  transactions Transaction[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([opportunitySlotId, status])
  @@map("t_reservations")
}

enum ReservationStatus {
  APPLIED
  ACCEPTED
  REJECTED
  CANCELED
}

model ReservationHistory {
  id String @id @default(cuid())

  reservationId String      @map("reservation_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  status ReservationStatus

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("t_reservation_histories")
}

// ------------------------------ Participation Domain ------------------------------

model Participation {
  id String @id @default(cuid())

  source      Source                    @default(INTERNAL)
  status      ParticipationStatus       @default(PENDING)
  reason      ParticipationStatusReason
  description String?

  images Image[] @relation("t_images_on_participations")

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  opportunitySlotId String?          @map("opportunity_slot_id")
  opportunitySlot   OpportunitySlot? @relation(fields: [opportunitySlotId], references: [id])

  reservationId         String?               @map("reservation_id")
  reservation           Reservation?          @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  ticketStatusHistories TicketStatusHistory[]

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)

  evaluationId String?       @map("evaluation_id")
  evaluation   Evaluation?
  transactions Transaction[]

  statusHistories ParticipationStatusHistory[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([status, userId])
  @@map("t_participations")
}

enum ParticipationStatus {
  PENDING
  PARTICIPATING
  PARTICIPATED
  NOT_PARTICIPATING
}

enum ParticipationStatusReason {
  PERSONAL_RECORD

  RESERVATION_JOINED
  RESERVATION_APPLIED
  RESERVATION_CANCELED
  RESERVATION_ACCEPTED
  RESERVATION_REJECTED

  OPPORTUNITY_CANCELED
}

model ParticipationStatusHistory {
  id String @id @default(cuid())

  participationId String        @map("participation_id")
  participation   Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  status ParticipationStatus
  reason ParticipationStatusReason

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("t_participation_status_histories")
}

// ------------------------------ Evaluation Domain ------------------------------

model Evaluation {
  id String @id @default(cuid())

  status        EvaluationStatus @default(PENDING)
  comment       String?
  credentialUrl String?          @map("credential_url")
  issuedAt      DateTime?        @map("issued_at")

  participationId String        @unique @map("participation_id")
  participation   Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  evaluatorId String @map("evaluator_id")
  evaluator   User   @relation(fields: [evaluatorId], references: [id], onDelete: SetNull)

  vcIssuanceRequest VcIssuanceRequest?
  histories         EvaluationHistory[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_evaluations")
}

enum EvaluationStatus {
  PENDING
  PASSED
  FAILED
}

model EvaluationHistory {
  id String @id @default(cuid())

  status  EvaluationStatus
  comment String?

  evaluationId String     @map("evaluation_id")
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("t_evaluation_histories")
}

// ------------------------------ Utility Domain ------------------------------

model Utility {
  id String @id @default(cuid())

  publishStatus PublishStatus @default(PUBLIC) @map("publish_status")

  name        String
  description String?

  images Image[] @relation("t_images_on_utilities")

  pointsRequired Int @map("points_required")

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  requiredForOpportunities Opportunity[] @relation("t_required_opportunities_on_utilities")

  ticketIssuer TicketIssuer[]
  tickets      Ticket[]

  ownerId String? @map("owner_id")
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_utilities")
}

// ------------------------------ Ticket Domain ------------------------------

model TicketIssuer {
  id String @id @default(cuid())

  /// Maximum number of tickets claimable from this link
  qtyToBeIssued Int @default(1) @map("qty_to_be_issued")

  utilityId String  @map("utility_id")
  utility   Utility @relation(fields: [utilityId], references: [id])

  ownerId String @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id])

  claimLink TicketClaimLink?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_ticket_issuers")
}

model TicketClaimLink {
  id     String          @id @default(cuid())
  status ClaimLinkStatus @default(ISSUED)

  /// Max number of tickets a user can claim using this link
  qty Int @default(0)

  issuerId String       @unique @map("issuer_id")
  issuer   TicketIssuer @relation(fields: [issuerId], references: [id])

  tickets Ticket[]

  claimedAt DateTime? @map("claimed_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("t_ticket_claim_links")
}

model Ticket {
  id String @id @default(cuid())

  status TicketStatus       @default(AVAILABLE)
  reason TicketStatusReason @default(GIFTED)

  walletId String @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Restrict)

  utilityId String  @map("utility_id")
  utility   Utility @relation(fields: [utilityId], references: [id], onDelete: Restrict)

  claimLinkId String?          @map("claim_link_id")
  claimLink   TicketClaimLink? @relation(fields: [claimLinkId], references: [id])

  ticketStatusHistories TicketStatusHistory[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_tickets")
}

model TicketStatusHistory {
  id String @id @default(cuid())

  ticketId String @map("ticket_id")
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Restrict)

  status TicketStatus       @default(AVAILABLE)
  reason TicketStatusReason @default(PURCHASED)

  transactionId String?      @unique @map("transaction_id")
  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: Restrict)

  participationId String?        @map("participation_id")
  participation   Participation? @relation(fields: [participationId], references: [id])

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_ticket_status_histories")
}

enum ClaimLinkStatus {
  ISSUED
  CLAIMED
  EXPIRED
}

enum TicketStatus {
  AVAILABLE
  DISABLED
}

enum TicketStatusReason {
  /// Issued as a gift or transferred from another user
  GIFTED

  /// Issued through purchase or point redemption
  PURCHASED
  /// Reissued due to a refund process
  REFUNDED

  /// Automatically issued upon reservation
  RESERVED
  /// Invalidated due to cancellation
  CANCELED

  /// Marked as used by the ticket holder
  USED

  /// Automatically expired after the validity period
  EXPIRED
}

// ------------------------------ Transaction Domain ------------------------------

model Transaction {
  id String @id @default(cuid())

  reason TransactionReason

  from            String?
  fromWallet      Wallet? @relation("from_wallet", fields: [from], references: [id], onDelete: SetNull)
  fromPointChange Int     @map("from_point_change")

  to            String?
  toWallet      Wallet? @relation("to_wallet", fields: [to], references: [id], onDelete: SetNull)
  toPointChange Int     @map("to_point_change")

  participationId String?        @map("participation_id")
  participation   Participation? @relation(fields: [participationId], references: [id], onDelete: SetNull)

  reservationId String?      @map("reservation_id")
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)

  ticketStatusHistory TicketStatusHistory?

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_transactions")
}

enum TransactionReason {
  POINT_ISSUED
  POINT_REWARD

  ONBOARDING

  DONATION
  GRANT

  TICKET_PURCHASED
  TICKET_REFUNDED

  OPPORTUNITY_RESERVATION_CREATED
  OPPORTUNITY_RESERVATION_CANCELED
  OPPORTUNITY_RESERVATION_REJECTED
}

// ------------------------------ API Key Domain ------------------------------

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique
  name      String
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("m_api_keys")
}

model NftWallet {
  id            String    @id @default(cuid())
  userId        String    @unique @map("user_id")
  walletAddress String    @map("wallet_address")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  nftInstances NftInstance[]

  @@map("t_nft_wallets")
}

model NftToken {
  id        String    @id @default(cuid())
  address   String    @unique
  name      String?
  symbol    String?
  type      String
  json      Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  nftInstances NftInstance[]

  @@map("t_nft_tokens")
}

model NftInstance {
  id          String    @id @default(cuid())
  instanceId  String    @map("instance_id")
  name        String?
  description String?
  imageUrl    String?   @map("image_url")
  json        Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  nftWalletId String    @map("nft_wallet_id")
  nftWallet   NftWallet @relation(fields: [nftWalletId], references: [id], onDelete: Cascade)

  nftTokenId String?   @map("nft_token_id")
  nftToken   NftToken? @relation(fields: [nftTokenId], references: [id], onDelete: SetNull)

  @@unique([nftWalletId, instanceId])
  @@map("t_nft_instances")
}
