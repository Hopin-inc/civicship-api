# Queries and Mutations

extend type Query {
    utilities(
        filter: UtilityFilterInput
        sort: UtilitySortInput
        cursor: String
        first: Int
    ): UtilitiesConnection! @complexity(value: 10, multipliers: ["first"])
    utility(id: ID!): Utility
}

extend type Mutation {
    utilityCreate(input: UtilityCreateInput!): UtilityCreatePayload
    utilityDelete(id: ID!): UtilityDeletePayload
    utilityUpdateInfo(id: ID!, input: UtilityUpdateInfoInput!): UtilityUpdateInfoPayload

    utilityPurchase(id: ID!, input: UtilityPurchaseInput!): UtilityPurchasePayload
    utilityUse(id: ID!, input: UtilityUseInput!): UtilityUsePayload
    utilityRefund(id: ID!, input: UtilityRefundInput!): UtilityRefundPayload
}

# Type definitions

type Utility {
    id: ID!
    name: String!
    description: String
    type: UtilityType!
    image: String
    pointsRequired: Int!

    community: Community
    requiredForOpportunities: [OpportunityRequiredUtility!]

    histories(
        filter: UtilityHistoryFilterInput
        sort: UtilityHistorySortInput
        cursor: String
        first: Int
    ): UtilityHistoriesConnection @complexity(value: 10, multipliers: ["first"])

    createdAt: Datetime!
    updatedAt: Datetime
}

enum UtilityType {
    TICKET
}