# Queries and Mutations

extend type Query {
    transactions(
        filter: TransactionFilterInput
        sort: TransactionSortInput
        cursor: String
        first: Int
    ): TransactionsConnection! @complexity(value: 10, multipliers: ["first"])
    transaction(id: ID!): Transaction
}

extend type Mutation {
    transactionIssueCommunityPoint(input: TransactionIssueCommunityPointInput!): TransactionIssueCommunityPointPayload
    transactionGrantCommunityPoint(input: TransactionGrantCommunityPointInput!): TransactionGrantCommunityPointPayload

    transactionDonateSelfPoint(input: TransactionDonateSelfPointInput!): TransactionDonateSelfPointPayload
}

# Type definitions

type Transaction {
    id: ID!
    reason: TransactionReason!

    fromWallet: Wallet
    fromPointChange: Int
    toWallet: Wallet
    toPointChange: Int

    participation: Participation

    utilityHistories(
        filter: UtilityHistoryFilterInput
        sort: UtilityHistorySortInput
        cursor: String
        first: Int
    ): UtilityHistoriesConnection! @complexity(value: 10, multipliers: ["first"])

    createdAt: Datetime!
    updatedAt: Datetime
}

enum TransactionReason {
    POINT_ISSUED
    PARTICIPATION_APPROVED
    UTILITY_USAGE
    MEMBERSHIP_DELETED
    GIFT
    OTHER
}
