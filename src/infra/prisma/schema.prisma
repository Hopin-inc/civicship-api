// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// debian-openssl-3.0.x for CloudRun, linux-arm64-openssl-3.0.x for local
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "typedSql", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "../../../docs/ERD.md"
  includeRelationFromFields = true
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../../../docs"
}

generator fabbrica {
  provider = "prisma-fabbrica"
  output   = "./__generated__/fabbrica"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models by domains

// # User

model User {
  id           String  @id @default(cuid())
  name         String
  slug         String
  image        String?
  bio          String?
  sysRole      SysRole @default(USER) @map("sys_role")
  urlWebsite   String? @map("url_website")
  urlX         String? @map("url_x")
  urlFacebook  String? @map("url_facebook")
  urlInstagram String? @map("url_instagram")
  urlYoutube   String? @map("url_youtube")
  urlTiktok    String? @map("url_tiktok")

  identities                     Identity[]
  memberships                    Membership[]
  participations                 Participation[]
  opportunitiesCreatedByMe       Opportunity[]
  opportunityInvitations         OpportunityInvitation[]
  opportunityInvitationHistories OpportunityInvitationHistory[]
  participationStatusChangedByMe ParticipationStatusHistory[]
  articlesWrittenByMe            Article[]                      @relation("t_author_users_on_articles")
  articlesAboutMe                Article[]                      @relation("t_related_users_on_articles")
  wallets                        Wallet[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_users")
}

model Identity {
  uid      String           @id
  platform IdentityPlatform
  userId   String           @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_identities")
}

// # Community

model Community {
  id            String    @id @default(cuid())
  name          String
  pointName     String    @map("point_name")
  image         String?
  bio           String?
  establishedAt DateTime? @map("established_at")
  website       String?

  memberships    Membership[]
  opportunities  Opportunity[]
  participations Participation[]
  wallets        Wallet[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  utilities Utility[]
  articles  Article[]

  @@map("t_communities")
}

// # Membership

model Membership {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  status MembershipStatus
  role   Role             @default(MEMBER)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, communityId])
  @@map("t_memberships")
}

model Wallet {
  id   String     @id @default(cuid())
  type WalletType @default(MEMBER)

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  currentPointView     CurrentPointView?
  accumulatedPointView AccumulatedPointView?

  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime?        @updatedAt @map("updated_at")
  fromTransactions Transaction[]    @relation("from_wallet")
  toTransactions   Transaction[]    @relation("to_wallet")
  utilityHistories UtilityHistory[]

  @@map("t_wallets")
}

view CurrentPointView {
  walletId     String @id @map("wallet_id")
  currentPoint Int    @map("current_point")

  wallet Wallet @relation(fields: [walletId], references: [id])

  @@map("mv_current_points")
}

view AccumulatedPointView {
  walletId         String @id @map("wallet_id")
  accumulatedPoint Int    @map("accumulated_point")

  wallet Wallet @relation(fields: [walletId], references: [id])

  @@map("mv_accumulated_points")
}

// # Opportunity

model Opportunity {
  id              String              @id @default(cuid())
  title           String
  description     String
  body            String?
  category        OpportunityCategory
  publishStatus   PublishStatus       @default(PUBLIC) @map("publish_status")
  requireApproval Boolean             @default(false) @map("require_approval")
  capacity        Int?
  pointsRequired  Int?                @map("points_required")
  pointsToEarn    Int?                @map("points_to_earn")
  feeRequired     Int?                @map("fee_required")
  image           String?
  /// [ArrayOfString]
  files           Json                @default("[]")
  startsAt        DateTime?           @map("starts_at")
  endsAt          DateTime?           @map("ends_at")

  placeId String? @map("place_id")
  place   Place?  @relation(fields: [placeId], references: [id], onDelete: Restrict)

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  articles Article[] @relation("t_opportunities_on_articles")

  participations Participation[]
  slots          OpportunitySlot[]
  invitations    OpportunityInvitation[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_opportunities")
}

model OpportunitySlot {
  id       String   @id @default(cuid())
  startsAt DateTime @map("starts_at")
  endsAt   DateTime @map("ends_at")

  opportunityId String?      @map("opportunity_id")
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  participations Participation[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_opportunity_slots")
}

model OpportunityInvitation {
  id      String  @id @default(cuid())
  code    String
  isValid Boolean @default(true) @map("is_valid")

  opportunityId String      @map("opportunity_id")
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: SetNull)

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  histories OpportunityInvitationHistory[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_opportunity_invitations")
}

model OpportunityInvitationHistory {
  id String @id @default(cuid())

  invitationId String                @map("invitation_id")
  invitation   OpportunityInvitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  invitedUserId String @map("invited_user_id")
  inivitedUser  User   @relation(fields: [invitedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_opportunity_invitation_histories")
}

model Place {
  id            String  @id @default(cuid())
  name          String
  address       String
  latitude      Decimal
  longitude     Decimal
  isManual      Boolean @map("is_manual")
  googlePlaceId String? @map("google_place_id")
  mapLocation   Json?   @map("map_location")

  cityCode String @map("city_code")
  city     City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  opportunities Opportunity[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_places")
}

model Participation {
  id     String              @id @default(cuid())
  status ParticipationStatus
  /// [ArrayOfImageInfo]
  images Json?

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)

  opportunityId String?      @map("opportunity_id")
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)

  opportunitySlotId String?          @map("opportunity_slot_id")
  opportunitySlot   OpportunitySlot? @relation(fields: [opportunitySlotId], references: [id], onDelete: SetNull)

  statusHistories ParticipationStatusHistory[]
  transactions    Transaction[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_participations")
}

model ParticipationStatusHistory {
  id     String              @id @default(cuid())
  status ParticipationStatus

  participationId String        @map("participation_id")
  participation   Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_participation_status_histories")
}

// # Article

model Article {
  id            String          @id @default(cuid())
  title         String
  introduction  String
  category      ArticleCategory
  publishStatus PublishStatus   @default(PUBLIC) @map("publish_status")
  body          String
  /// [ImageInfo]
  thumbnail     Json?
  publishedAt   DateTime        @map("published_at")

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  authors       User[]        @relation("t_author_users_on_articles")
  relatedUsers  User[]        @relation("t_related_users_on_articles")
  opportunities Opportunity[] @relation("t_opportunities_on_articles")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_articles")
}

// # Utility

model Utility {
  id             String  @id @default(cuid())
  name           String
  description    String?
  image          String?
  pointsRequired Int     @map("points_required")

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  utilityHistories UtilityHistory[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_utilities")
}

model UtilityHistory {
  id     String    @id @default(cuid())
  usedAt DateTime? @map("used_at")

  walletId String @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Restrict)

  utilityId String  @map("utility_id")
  utility   Utility @relation(fields: [utilityId], references: [id], onDelete: Restrict)

  transactionId String      @map("transaction_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_utility_histories")
}

// # Transaction

model Transaction {
  id     String            @id @default(cuid())
  reason TransactionReason

  from            String?
  fromWallet      Wallet? @relation("from_wallet", fields: [from], references: [id], onDelete: SetNull)
  fromPointChange Int?    @map("from_point_change")
  to              String?
  toWallet        Wallet? @relation("to_wallet", fields: [to], references: [id], onDelete: SetNull)
  toPointChange   Int?    @map("to_point_change")

  participationId String?        @map("participation_id")
  participation   Participation? @relation(fields: [participationId], references: [id], onDelete: SetNull)

  utilityHistories UtilityHistory[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_transactions")
}

// # Master

model City {
  code String @id
  name String

  stateCode   String @map("state_code")
  countryCode String @map("country_code") @db.Char(2)
  state       State  @relation(fields: [stateCode, countryCode], references: [code, countryCode], onDelete: Restrict)

  places Place[]

  @@map("m_cities")
}

model State {
  code        String
  name        String
  countryCode String @map("country_code") @db.Char(2)

  cities City[]

  @@id([code, countryCode])
  @@map("m_states")
}

// # General Enums

enum IdentityPlatform {
  LINE
  FACEBOOK
}

enum SysRole {
  SYS_ADMIN
  USER
}

enum Role {
  OWNER
  MANAGER
  MEMBER
}

enum PublishStatus {
  PUBLIC
  COMMUNITY_INTERNAL
  PRIVATE
}

enum OpportunityCategory {
  QUEST
  EVENT
  ACTIVITY
}

enum ArticleCategory {
  ACTIVITY_REPORT
  INTERVIEW
}

enum MembershipStatus {
  INVITED
  CANCELED
  JOINED
  WITHDRAWED
}

enum ParticipationStatus {
  INVITED
  APPLIED
  CANCELED
  PARTICIPATING
  NOT_PARTICIPATING
  APPROVED
  DENIED
}

enum WalletType {
  COMMUNITY
  MEMBER
}

enum TransactionReason {
  POINT_ISSUED
  POINT_REWARD
  DONATION
  GRANT
  UTILITY_REDEEMED
  MEMBERSHIP_DELETED
}
