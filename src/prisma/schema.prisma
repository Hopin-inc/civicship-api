// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "../../docs/ERD.md"
  includeRelationFromFields = true
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../../docs"
}

generator fabbrica {
  provider = "prisma-fabbrica"
  output   = "./../__generated__/fabbrica"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Models

// # Users

model User {
  id         String  @id @default(cuid())
  lastName   String  @map("last_name")
  middleName String? @map("middle_name")
  firstName  String  @map("first_name")
  email      String?
  image      String?
  bio        String?
  isPublic   Boolean @default(false) @map("is_public")

  agendas         AgendasOnUsers[]
  skillsets       SkillsetsOnUsers[]
  issueCategories IssueCategoriesOnUsers[]
  cities          CitiesOnUsers[]
  groups          UsersOnGroups[]
  organizations   UsersOnOrganizations[]
  applications    Application[]
  confirmations   ApplicationConfirmation[]
  activities      Activity[]

  likes    Like[]
  comments Comment[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_users")
}

// # Groups and organizations

model Group {
  id    String  @id @default(cuid())
  name  String
  image String?
  bio   String?

  users   UsersOnGroups[]
  events  EventsOnGroups[]
  issues  IssuesOnGroups[]
  agendas AgendasOnGroups[]
  cities  CitiesOnGroups[]
  targets Target[]

  parentId String? @map("parent_id")
  parent   Group?  @relation("groups_on_groups", fields: [parentId], references: [id], onDelete: SetNull)
  children Group[] @relation("groups_on_groups")

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_groups")
}

model UsersOnGroups {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  addedAt   DateTime? @map("added_at")
  removedAt DateTime? @map("removed_at")
  isPublic  Boolean   @default(true) @map("is_public")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@map("t_users_on_groups")
}

model Organization {
  id             String          @id @default(cuid())
  name           String
  entity         String?
  entityPosition EntityPosition? @map("entity_position")
  image          String?
  bio            String?
  establishedAt  DateTime?       @map("established_at")
  website        String?
  isPublic       Boolean         @default(false) @map("is_public")

  zipcode          String  @db.VarChar(7)
  stateCode        String  @map("state_code")
  stateCountryCode String  @map("state_country_code")
  cityCode         String  @map("city_code")
  state            State   @relation(fields: [stateCode, stateCountryCode], references: [code, countryCode], onDelete: Restrict)
  city             City    @relation(fields: [cityCode], references: [code], onDelete: Restrict)
  address1         String
  address2         String?

  groups  Group[]
  users   UsersOnOrganizations[]
  events  EventsOnOrganizations[]
  issues  IssuesOnOrganizations[]
  agendas AgendasOnOrganizations[]
  cities  CitiesOnOrganizations[]
  targets Target[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_organizations")
}

model UsersOnOrganizations {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  displayName  String?   @map("display_name")
  displayImage String?   @map("display_image")
  addedAt      DateTime? @map("added_at")
  removedAt    DateTime? @map("removed_at")
  isPublic     Boolean   @default(false) @map("is_public")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, organizationId])
  @@map("t_users_on_organizations")
}

// # Activities

model Activity {
  id            String        @id @default(cuid())
  description   String?
  remark        String?
  isPublic      Boolean       @default(false) @map("is_public")
  activityStyle ActivityStyle @default(OFFSITE) @map("activity_style")
  /// [ArrayOfString]
  images        Json          @default("[]")
  startsAt      DateTime      @map("starts_at")
  endsAt        DateTime      @map("ends_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String? @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)

  issueId String? @map("issue_id")
  issue   Issue?  @relation(fields: [issueId], references: [id], onDelete: SetNull)

  applicationId String?      @map("application_id")
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)

  stat ActivityStatView?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_activities")
}

model Application {
  id          String   @id @default(cuid())
  comment     String?
  isPublic    Boolean  @default(false) @map("is_public")
  submittedAt DateTime @map("submitted_at")

  eventId String? @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  activities Activity[]
  approvals  ApplicationConfirmation[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_applications")
}

model ApplicationConfirmation {
  id         String  @id @default(cuid())
  isApproved Boolean @default(true) @map("is_approved")
  comment    String?

  applicationId String      @map("application_id")
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  confirmerId String? @map("confirmer_id")
  confirmedBy User?   @relation(fields: [confirmerId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_application_confirmations")
}

model Event {
  id              String    @id @default(cuid())
  description     String?
  isPublic        Boolean   @default(false) @map("is_public")
  /// [ArrayOfString]
  images          Json      @default("[]")
  startsAt        DateTime  @map("starts_at")
  endsAt          DateTime  @map("ends_at")
  plannedStartsAt DateTime? @map("planned_starts_at")
  plannedEndsAt   DateTime? @map("planned_ends_at")

  agendas       AgendasOnEvents[]
  skillsets     SkillsetsOnEvents[]
  groups        EventsOnGroups[]
  organizations EventsOnOrganizations[]
  applications  Application[]
  likes         Like[]
  comments      Comment[]
  activities    Activity[]
  cities        CitiesOnEvents[]
  stat          EventStatView?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_events")
}

model EventsOnGroups {
  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([groupId, eventId])
  @@map("t_events_on_groups")
}

model EventsOnOrganizations {
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  eventId        String       @map("event_id")
  event          Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([organizationId, eventId])
  @@map("t_events_on_organizations")
}

model Issue {
  id          String  @id @default(cuid())
  description String?
  isPublic    Boolean @default(false) @map("is_public")
  /// [ArrayOfString]
  images      Json    @default("[]")

  skillsets       SkillsetsOnIssues[]
  issueCategories IssueCategoriesOnIssues[]
  groups          IssuesOnGroups[]
  organizations   IssuesOnOrganizations[]
  likes           Like[]
  comments        Comment[]
  activities      Activity[]
  cities          CitiesOnIssues[]
  stat            IssueStatView?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_issues")
}

model IssuesOnGroups {
  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  issueId String @map("issue_id")
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([groupId, issueId])
  @@map("t_issues_on_groups")
}

model IssuesOnOrganizations {
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  issueId        String       @map("issue_id")
  issue          Issue        @relation(fields: [issueId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([organizationId, issueId])
  @@map("t_issues_on_organizations")
}

// # Reactions

model Like {
  id       String   @id @default(cuid())
  postedAt DateTime @map("posted_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String? @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  issueId String? @map("issue_id")
  issue   Issue?  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_likes")
}

model Comment {
  id       String   @id @default(cuid())
  content  String
  postedAt DateTime @map("posted_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String? @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  issueId String? @map("issue_id")
  issue   Issue?  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_comments")
}

// # Management

model Target {
  id        String   @id @default(cuid())
  name      String
  value     Float
  validFrom DateTime @map("valid_from")
  validTo   DateTime @map("valid_to")

  organizationId String?       @map("organization_id")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  groupId String? @map("group_id")
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  indexId Int   @map("index_id")
  index   Index @relation(fields: [indexId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_targets")
}

// Master tables and its related join tables

model Agenda {
  id          Int     @id
  code        String
  name        String
  description String?

  users         AgendasOnUsers[]
  groups        AgendasOnGroups[]
  organizations AgendasOnOrganizations[]
  events        AgendasOnEvents[]

  @@map("m_agendas")
}

model AgendasOnUsers {
  userId   String @map("user_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agendaId Int    @map("agenda_id")
  agenda   Agenda @relation(fields: [agendaId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, agendaId])
  @@map("t_agendas_on_users")
}

model AgendasOnGroups {
  groupId  String @map("group_id")
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  agendaId Int    @map("agenda_id")
  agenda   Agenda @relation(fields: [agendaId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([groupId, agendaId])
  @@map("t_agendas_on_groups")
}

model AgendasOnOrganizations {
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agendaId       Int          @map("agenda_id")
  agenda         Agenda       @relation(fields: [agendaId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([organizationId, agendaId])
  @@map("t_agendas_on_organizations")
}

model AgendasOnEvents {
  eventId  String @map("event_id")
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  agendaId Int    @map("agenda_id")
  agenda   Agenda @relation(fields: [agendaId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([eventId, agendaId])
  @@map("t_agendas_on_events")
}

model IssueCategory {
  id          Int     @id
  code        String
  name        String
  description String?

  issues IssueCategoriesOnIssues[]
  users  IssueCategoriesOnUsers[]

  @@map("m_issue_categories")
}

model IssueCategoriesOnIssues {
  issueId         String        @map("issue_id")
  issue           Issue         @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueCategoryId Int           @map("issue_category_id")
  issueCategory   IssueCategory @relation(fields: [issueCategoryId], references: [id], onDelete: Restrict)

  @@id([issueId, issueCategoryId])
  @@map("m_issue_categories_on_issues")
}

model IssueCategoriesOnUsers {
  userId          String        @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueCategoryId Int           @map("issue_category_id")
  issueCategory   IssueCategory @relation(fields: [issueCategoryId], references: [id], onDelete: Restrict)

  @@id([userId, issueCategoryId])
  @@map("m_issue_categories_on_users")
}

model Skillset {
  id          Int     @id
  code        String
  name        String
  description String?

  users  SkillsetsOnUsers[]
  events SkillsetsOnEvents[]
  issues SkillsetsOnIssues[]

  @@map("m_skillsets")
}

model SkillsetsOnUsers {
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillsetId Int      @map("skillset_id")
  skillset   Skillset @relation(fields: [skillsetId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, skillsetId])
  @@map("t_skillsets_on_users")
}

model SkillsetsOnEvents {
  eventId    String   @map("event_id")
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  skillsetId Int      @map("skillset_id")
  skillset   Skillset @relation(fields: [skillsetId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([eventId, skillsetId])
  @@map("t_skillsets_on_events")
}

model SkillsetsOnIssues {
  issueId    String   @map("issue_id")
  issue      Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  skillsetId Int      @map("skillset_id")
  skillset   Skillset @relation(fields: [skillsetId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([issueId, skillsetId])
  @@map("t_skillsets_on_issues")
}

model City {
  code        String @id
  name        String
  stateCode   String @map("state_code")
  countryCode String @map("country_code") @db.Char(2)
  state       State  @relation(fields: [stateCode, countryCode], references: [code, countryCode], onDelete: Restrict)

  cities                 CitiesOnUsers[]
  groups                 CitiesOnGroups[]
  organizations          CitiesOnOrganizations[]
  addressedOrganizations Organization[]
  events                 CitiesOnEvents[]
  issues                 CitiesOnIssues[]

  @@map("m_cities")
}

model State {
  code         String
  countryCode  String         @map("country_code") @db.Char(2)
  name         String
  cities       City[]
  organization Organization[]

  @@id([code, countryCode])
  @@map("m_states")
}

model CitiesOnUsers {
  userId   String @map("user_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cityCode String @map("city_code")
  city     City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, cityCode])
  @@map("t_cities_on_users")
}

model CitiesOnGroups {
  groupId  String @map("group_id")
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  cityCode String @map("city_code")
  city     City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([groupId, cityCode])
  @@map("t_cities_on_groups")
}

model CitiesOnOrganizations {
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  cityCode       String       @map("city_code")
  city           City         @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([organizationId, cityCode])
  @@map("t_cities_on_organizations")
}

model CitiesOnEvents {
  eventId  String @map("event_id")
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  cityCode String @map("city_code")
  city     City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([eventId, cityCode])
  @@map("t_cities_on_events")
}

model CitiesOnIssues {
  issueId  String @map("issue_id")
  issue    Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  cityCode String @map("city_code")
  city     City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([issueId, cityCode])
  @@map("t_cities_on_issues")
}

model Index {
  id          Int       @id
  code        String
  name        String
  valueType   ValueType @map("value_type")
  description String?

  targets Target[]

  @@map("t_indexes")
}

// Enums

enum EntityPosition {
  PREFIX
  SUFFIX
}

enum ValueType {
  INT
  FLOAT
}

enum ActivityStyle {
  ONSITE
  OFFSITE
}

// Views

view ActivityStatView {
  id       String   @unique
  isPublic Boolean  @map("is_public")
  startsAt DateTime @map("starts_at")
  endsAt   DateTime @map("ends_at")

  userId  String @map("user_id")
  eventId String @map("event_id")

  activity     Activity @relation(fields: [id], references: [id])
  totalMinutes Int      @map("total_minutes")

  @@map("v_activities_stats")
}

view EventStatView {
  id              String    @unique
  isPublic        Boolean   @map("is_public")
  startsAt        DateTime  @map("starts_at")
  endsAt          DateTime  @map("ends_at")
  plannedStartsAt DateTime? @map("planned_starts_at")
  plannedEndsAt   DateTime? @map("planned_ends_at")

  event        Event @relation(fields: [id], references: [id])
  totalMinutes Int   @map("total_minutes")

  @@map("v_events_stats")
}

view IssueStatView {
  id              String    @unique
  isPublic        Boolean   @map("is_public")
  startsAt        DateTime  @map("starts_at")
  endsAt          DateTime  @map("ends_at")
  plannedStartsAt DateTime? @map("planned_starts_at")
  plannedEndsAt   DateTime? @map("planned_ends_at")

  issue        Issue @relation(fields: [id], references: [id])
  totalMinutes Int   @map("total_minutes")

  @@map("v_issues_stats")
}
