// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// debian-openssl-3.0.x for CloudRun, linux-arm64-openssl-3.0.x for local
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "typedSql", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "../../docs/ERD.md"
  includeRelationFromFields = true
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../../docs"
}

generator fabbrica {
  provider = "prisma-fabbrica"
  output   = "./__generated__/fabbrica"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models by domains

// # User

model User {
  id           String  @id @default(cuid())
  name         String
  slug         String
  image        String?
  bio          String?
  sysRole      SysRole @default(USER) @map("sys_role")
  urlWebsite   String? @map("url_website")
  urlX         String? @map("url_x")
  urlFacebook  String? @map("url_facebook")
  urlInstagram String? @map("url_instagram")
  urlYoutube   String? @map("url_youtube")
  urlTiktok    String? @map("url_tiktok")

  identities               Identity[]
  memberships              Membership[]
  participations           Participation[]
  opportunitiesCreatedByMe Opportunity[]
  wallets                  Wallet[]

  createdAt                       DateTime                     @default(now()) @map("created_at")
  updatedAt                       DateTime?                    @updatedAt @map("updated_at")
  participationStatusChangeddByMe ParticipationStatusHistory[]

  @@map("t_users")
}

model Identity {
  uid      String           @id
  platform IdentityPlatform
  userId   String           @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_identities")
}

// # Community

model Community {
  id            String    @id @default(cuid())
  name          String
  pointName     String    @map("point_name")
  image         String?
  bio           String?
  establishedAt DateTime? @map("established_at")
  website       String?

  stateCode        String @map("state_code")
  stateCountryCode String @map("state_country_code")
  cityCode         String @map("city_code")
  state            State  @relation(fields: [stateCode, stateCountryCode], references: [code, countryCode], onDelete: Restrict)
  city             City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  memberships    Membership[]
  ooportunities  Opportunity[]
  participations Participation[]
  wallets        Wallet[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  utility   Utility[]

  @@map("t_communities")
}

// Membership

model Membership {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  role Role @default(MEMBER)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, communityId])
  @@map("t_memberships")
}

model Wallet {
  id String @id @default(cuid())

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  currentPointView CurrentPointView?

  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime?     @updatedAt @map("updated_at")
  fromTransactions Transaction[] @relation("from_wallet")
  toTransactions   Transaction[] @relation("to_wallet")

  @@map("t_wallets")
}

view CurrentPointView {
  walletId     String @id @map("wallet_id")
  currentPoint Int    @map("current_point")

  wallet Wallet @relation(fields: [walletId], references: [id])

  @@map("mv_current_point")
}

// # Opportunity

model Opportunity {
  id                     String              @id @default(cuid())
  title                  String
  description            String?
  category               OpportunityCategory
  publishStatus          PublishStatus       @default(PUBLIC) @map("publish_status")
  requireApproval        Boolean             @default(false) @map("require_approval")
  capacity               Int?
  pointsPerParticipation Int                 @map("points_per_participation")
  image                  String?
  /// [ArrayOfString]
  files                  Json                @default("[]")
  startsAt               DateTime?           @map("starts_at")
  endsAt                 DateTime?           @map("ends_at")

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id])

  createdBy     String @map("created_by")
  createdByUser User   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  stateCode        String @map("state_code")
  stateCountryCode String @map("state_country_code")
  cityCode         String @map("city_code")
  state            State  @relation(fields: [stateCode, stateCountryCode], references: [code, countryCode], onDelete: Restrict)
  city             City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  participations Participation[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_opportunities")
}

model Participation {
  id     String              @id @default(cuid())
  status ParticipationStatus

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)

  opportunityId String?      @map("opportunity_id")
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)

  statusHistories ParticipationStatusHistory[]
  transactions    Transaction[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_participations")
}

model ParticipationStatusHistory {
  id     String              @id @default(cuid())
  status ParticipationStatus

  participationId String        @map("participation_id")
  participation   Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  createdBy     String? @map("created_by")
  createdByUser User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_participation_status_histories")
}

// Utility

model Utility {
  id             String  @id @default(cuid())
  name           String
  description    String?
  image          String?
  pointsRequired Int     @map("points_required")

  communityId String    @map("community_id")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_utilities")
}

// Transaction

model Transaction {
  id String @id @default(cuid())

  from            String?
  fromWallet      Wallet? @relation("from_wallet", fields: [from], references: [id], onDelete: SetNull)
  fromPointChange Int     @map("from_point_change")
  to              String?
  toWallet        Wallet? @relation("to_wallet", fields: [to], references: [id], onDelete: SetNull)
  toPointChange   Int     @map("to_point_change")

  participationId String?        @map("participation_id")
  participation   Participation? @relation(fields: [participationId], references: [id], onDelete: SetNull)

  utilityId String?  @map("utility_id")
  utility   Utility? @relation(fields: [utilityId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_transactions")
}

// Master

model City {
  code        String @id
  name        String
  stateCode   String @map("state_code")
  countryCode String @map("country_code") @db.Char(2)
  state       State  @relation(fields: [stateCode, countryCode], references: [code, countryCode], onDelete: Restrict)

  communities   Community[]
  opportunities Opportunity[]

  @@map("m_cities")
}

model State {
  code        String
  countryCode String @map("country_code") @db.Char(2)
  name        String
  cities      City[]

  communities   Community[]
  opportunities Opportunity[]

  @@id([code, countryCode])
  @@map("m_states")
}

// General Enums

enum IdentityPlatform {
  LINE
  FACEBOOK
}

enum SysRole {
  SYS_ADMIN
  USER
}

enum Role {
  OWNER
  MANAGER
  MEMBER
}

enum PublishStatus {
  PUBLIC
  COMMUNITY_INTERNAL
  PRIVATE
}

enum OpportunityCategory {
  EVENT
  TASK
  CONVERSATION
}

enum ParticipationStatus {
  APPLIED
  PARTICIPATING
  NOT_PARTICIPATING
  APPROVED
  DENIED
}

enum TransactionReason {
  POINT_ISSUED
  PARTICIPATION_APPROVED
  MEMBERSHIP_DELETED
  GIFT
  OTHER
}
