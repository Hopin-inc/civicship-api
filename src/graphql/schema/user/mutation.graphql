# user

## Input definition

input UserCreateInput {
    lastName: String!
    middleName: String
    firstName: String!
    email: String
    image: String
    bio: String
}

input UserUpdateContentInput {
    lastName: String!
    middleName: String
    firstName: String!
    email: String
    image: String
    bio: String
}

input UserSwitchPrivacyInput {
    isPublic: Boolean!
}

## Type definitions

type UserCreateSuccess {
    user: User
}

type UserDeleteSuccess {
    userId: ID!
}

type UserUpdateContentSuccess {
    user: User
}

type UserSwitchPrivacySuccess {
    user: User!
}

## Union definitions

union UserCreatePayload =
    UserCreateSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError

union UserDeletePayload =
    UserDeleteSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError

union UserUpdateContentPayload =
    UserUpdateContentSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError

union UserSwitchPrivacyPayload =
    UserSwitchPrivacySuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError


# identify

## Input definition

input CreateUserInput {
    lastName: String!
    middleName: String
    firstName: String!
    email: String
    image: ImageInput
    bio: String
    isPublic: Boolean
}
