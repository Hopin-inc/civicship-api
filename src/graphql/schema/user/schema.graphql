extend type Query {
    users(
        filter: UserFilterInput
        sort: UserSortInput
        cursor: String
        first: Int
    ): UsersConnection! @complexity(value: 10)
    user(id: ID!): User

    currentUser: CurrentUserPayload
}

extend type Mutation {
    createUser(input: CreateUserInput!): CurrentUserPayload
    deleteUser: CurrentUserPayload

    userUpdateProfile(id: ID!, input: UserUpdateProfileInput!): UserUpdateProfilePayload
}

# Type definitions

type User {
    id: ID!
    name: String!
    slug: String!
    image: String
    bio: String
    sysRole: SysRole
    urlWebsite: String
    urlX: String
    urlFacebook: String
    urlInstagram: String
    urlYoutube: String
    urlTiktok: String

    createdAt: Datetime!
    updatedAt: Datetime

    memberships: [Membership!] @complexity(value: 10)
    wallets: [Wallet!] @complexity(value: 10)

    opportunitiesCreatedByMe: [Opportunity!] @complexity(value: 10)
    participations: [Participation!] @complexity(value: 10)
    participationStatusChangedByMe: [ParticipationStatusHistory!] @complexity(value: 10)
}