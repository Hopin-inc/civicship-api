extend type Query {
    users(
        filter: UserFilterInput
        sort: UserSortInput
        cursor: String
        first: Int
    ): UsersConnection!
    user(id: ID!): User
}

extend type Mutation {
    createUser(content: CreateUserInput!): User
    deleteUser(id: ID!): User
    updateUserProfile(id: ID!, content: UpdateUserProfileInput!): UpdateUserProfilePayload
    updateUserPrivacy(id: ID!, content: UpdateUserPrivacyInput!): UpdateUserPrivacyPayload
    addGroupToUser(id: ID!, content: AddGroupToUserInput!): AddGroupToUserPayload
    removeGroupFromUser(id: ID!, content: RemoveGroupFromUserInput!): RemoveGroupFromUserPayload
    addOrganizationToUser(id: ID!, content: AddOrganizationToUserInput!): AddOrganizationToUserPayload
    removeOrganizationFromUser(id: ID!, content: RemoveOrganizationFromUserInput!): RemoveOrganizationFromUserPayload
    addActivityToUser(id: ID!, content: AddActivityToUserInput!): AddActivityToUserPayload
    removeActivityFromUser(id: ID!, content: RemoveActivityFromUserInput!): RemoveActivityFromUserPayload
}

# Type definitions

type User {
    id: ID!
    lastName: String!
    middleName: String
    firstName: String!
    email: String
    image: String
    bio: String
    sysRole: SysRole!
    isPublic: Boolean!

    agendas: [Agenda!]
    cities: [City!]
    groups: [Group!]
    organizations: [Organization!]
    activities: [Activity!]
    likes: [Like!]
    comments: [Comment!]

    createdAt: Datetime!
    updatedAt: Datetime
}
