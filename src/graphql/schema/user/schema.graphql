extend type Query {
    users(
        filter: UserFilterInput
        sort: UserSortInput
        cursor: String
        first: Int
    ): UsersConnection! @complexity(value: 10, multipliers: ["first"])
    user(id: ID!): User
}

extend type Mutation {
    userUpdateMyProfile(input: UserUpdateProfileInput!): UserUpdateProfilePayload
}

# Type definitions

type User {
    id: ID!
    name: String!
    slug: String!
    image: String
    bio: String
    sysRole: SysRole!
    urlWebsite: String
    urlX: String
    urlFacebook: String
    urlInstagram: String
    urlYoutube: String
    urlTiktok: String

    createdAt: Datetime!
    updatedAt: Datetime

    memberships(first: Int, cursor: String): MembershipsConnection @complexity(value: 10, multipliers: ["first"])
    wallets(first: Int, cursor: String): WalletsConnection @complexity(value: 10, multipliers: ["first"])

    opportunitiesCreatedByMe(first: Int, cursor: String): OpportunitiesConnection @complexity(value: 10, multipliers: ["first"])
    participations(first: Int, cursor: String): ParticipationsConnection @complexity(value: 10, multipliers: ["first"])
    participationStatusChangedByMe(first: Int, cursor: String): ParticipationStatusHistoriesConnection @complexity(value: 10, multipliers: ["first"])
}