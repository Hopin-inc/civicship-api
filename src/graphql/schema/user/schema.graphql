extend type Query {
    users(
        filter: UserFilterInput
        sort: UserSortInput
        cursor: String
        first: Int
    ): UsersConnection!
    user(id: ID!): User
}

extend type Mutation {
    userCreate(input: UserInput!): UserCreatePayload
    userDelete(id: ID!): UserDeletePayload
    userUpdate(id: ID!, input: UserInput!): UserUpdatePayload
    userPublish(id: ID!, input: UserPrivacyInput!): UserPrivacyPayload
    userUnpublish(id: ID!, input: UserPrivacyInput!): UserPrivacyPayload
    userAddGroup(id: ID!, input: UserAddGroupInput!): UserAddGroupPayload
    userRemoveGroup(id: ID!, input: UserRemoveGroupInput!): UserRemoveGroupPayload
    userAddOrganization(id: ID!, input: UserAddOrganizationInput!): UserRemoveOrganizationPayload
    userRemoveOrganization(id: ID!, input: UserRemoveOrganizationInput!): UserRemoveOrganizationPayload
    userAddActivity(id: ID!, input: UserAddActivityInput!): UserAddActivityPayload
    userRemoveActivity(id: ID!, input: UserRemoveActivityInput!): UserRemoveActivityPayload
}

# Type definitions

type User {
    id: ID!
    lastName: String!
    middleName: String
    firstName: String!
    email: String
    image: String
    bio: String
    isPublic: Boolean!

    agendas: [Agenda!]
    cities: [City!]
    groups: [Group!]
    organizations: [Organization!]
    activities: [Activity!]
    likes: [Like!]
    comments: [Comment!]

    createdAt: Datetime!
    updatedAt: Datetime
}
