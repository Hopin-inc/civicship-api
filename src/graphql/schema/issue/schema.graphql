# Queries and Mutations

extend type Query {
    issues(
        filter: IssueFilterInput
        sort: IssueSortInput
        cursor: String
        first: Int
    ): IssuesConnection!
    issue(id: ID!): Issue
}

extend type Mutation {
    issueCreate(input: IssueCreateInput!): IssueCreatePayload
    issueDelete(id: ID!): IssueDeletePayload
    issueUpdateContent(id: ID!, input: IssueUpdateContentInput!): IssueUpdateContentPayload
    issuePublish(id: ID!, input: IssuePrivacyInput!): IssueUpdatePrivacyPayload
    issueUnpublish(id: ID!, input: IssuePrivacyInput!): IssueUpdatePrivacyPayload
    issueAddGroup(id: ID!, input: IssueAddGroupInput!): IssueUpdateGroupPayload
    issueRemoveGroup(id: ID!, input: IssueRemoveGroupInput!): IssueUpdateGroupPayload
    issueAddOrganization(id: ID!, input: IssueAddOrganizationInput!): IssueUpdateOrganizationPayload
    issueRemoveOrganization(id: ID!, input: IssueRemoveOrganizationInput!): IssueUpdateOrganizationPayload
    issueAddSkillset(id: ID!, input: IssueAddSkillsetInput!): IssueUpdateSkillsetPayload
    issueRemoveSkillset(id: ID!, input: IssueRemoveSkillsetInput!): IssueUpdateSkillsetPayload
    issueAddCity(id: ID!, input: IssueAddCityInput!): IssueUpdateCityPayload
    issueRemoveCity(id: ID!, input: IssueRemoveCityInput!): IssueUpdateCityPayload
    issueAddCategory(id: ID!, input: IssueAddCategoryInput!): IssueUpdateCategoryPayload
    issueRemoveCategory(id: ID!, input: IssueRemoveCategoryInput!): IssueUpdateCategoryPayload
}

# Type definitions

type Issue {
    id: ID!
    description: String
    isPublic: Boolean!
    images: [String!]

    issueCategories: [IssueCategory!]
    skillsets: [Skillset!]

    organizations: [Organization!]
    groups: [Group!]
    cities: [City!]

    activities: Activities
    likes: Likes
    comments: Comments

    createdAt: Datetime!
    updatedAt: Datetime
}
