# Queries and Mutations

extend type Query {
    events(
        filter: EventFilterInput
        sort: EventSortInput
        cursor: String
        first: Int
    ): EventsConnection!
    event(id: ID!): Event
}

extend type Mutation {
    eventCreate(input: EventInput!): EventCreatePayload
    eventDelete(id: ID!): EventDeletePayload
    eventUpdate(id: ID!, input: EventInput!): EventUpdatePayload
    eventPublish(id: ID!, input: EventPrivacyInput!): EventUpdatePrivacyPayload
    eventUnpublish(id: ID!, input: EventPrivacyInput!): EventUpdatePrivacyPayload
    eventAddGroup(id: ID!, input: EventAddGroupInput!): EventAddGroupPayload
    eventRemoveGroup(id: ID!, input: EventRemoveGroupInput!): EventRemoveGroupPayload
    eventAddOrganization(id: ID!, input: EventAddOrganizationInput!): EventAddOrganizationPayload
    eventRemoveOrganization(id: ID!, input: EventRemoveOrganizationInput!): EventRemoveOrganizationPayload
}

# Type definitions

type Event {
    id: ID!
    description: String
    isPublic: Boolean!
    images: [String!]
    startsAt: Datetime!
    endsAt: Datetime!
    plannedStartsAt: Datetime
    plannedEndsAt: Datetime
    totalMinutes: Int!

    agendas: [Agenda!]
    organizations: [Organization!]
    groups: [Group!]
    cities: [City!]
    likes: Likes
    comments: Comments
    activities: Activities

    createdAt: Datetime!
    updatedAt: Datetime
}