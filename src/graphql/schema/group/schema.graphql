# Queries and Mutations

extend type Query {
    groups(
        filter: GroupFilterInput
        sort: GroupSortInput
        cursor: String
        first: Int
    ): GroupsConnection!
    group(id: ID!): Group
}

extend type Mutation {
    groupCreate(input: GroupCreateInput!): GroupCreatePayload
    groupDelete(id: ID!): GroupDeletePayload
    groupUpdateContent(id: ID!, input: GroupUpdateContentInput!): GroupUpdateContentPayload
    groupAddUser(id: ID!, input: GroupAddUserInput!): GroupAddUserPayload
    groupRemoveUser(id: ID!, input: GroupRemoveUserInput!): GroupRemoveUserPayload
    groupAddEvent(id: ID!, input: GroupAddEventInput!): GroupAddEventPayload
    groupRemoveEvent(id: ID!, input: GroupRemoveEventInput!): GroupRemoveEventPayload
    groupAddTarget(id: ID!, input: GroupAddTargetInput!): GroupAddTargetPayload
    groupRemoveTarget(id: ID!, input: GroupRemoveTargetInput!): GroupRemoveTargetPayload
    groupAddParent(id: ID!, input: GroupAddParentInput!): GroupAddParentPayload
    groupRemoveParent(id: ID!, input: GroupRemoveParentInput!): GroupRemoveParentPayload
    groupAddChild(id: ID!, input: GroupAddChildInput!): GroupAddChildPayload
    groupRemoveChild(id: ID!, input: GroupRemoveChildInput!): GroupRemoveChildPayload
}

# Type definitions

type Group {
    id: ID!
    name:  String!
    image: String
    bio: String

    users: [User!]
    events: [Event!]
    agendas: [Agenda!]
    cities: [City!]
    targets: [Target!]
    parent: Group
    children: [Group!]
    organization: Organization

    createdAt: Datetime!
    updatedAt: Datetime
}