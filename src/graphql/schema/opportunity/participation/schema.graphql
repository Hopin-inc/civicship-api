# Queries and Mutations

extend type Query {
    participations(
        filter: ParticipationFilterInput
        sort: ParticipationSortInput
        cursor: String
        first: Int
    ): ParticipationsConnection! @complexity(value: 10, multipliers: ["first"])
    participation(id: ID!): Participation
}

extend type Mutation {
    # invite
    participationInvite(input: ParticipationInviteInput!): ParticipationInvitePayload
    participationCancelInvitation(id: ID!, input: ParticipationSetStatusInput!): ParticipationSetStatusPayload
    participationAcceptMyInvitation(id: ID!): ParticipationSetStatusPayload
    participationDenyMyInvitation(id: ID!): ParticipationSetStatusPayload

    # apply
    participationApply(input: ParticipationApplyInput!): ParticipationApplyPayload
    participationCancelMyApplication(id: ID!): ParticipationSetStatusPayload
    participationAcceptApplication(id: ID!, input: ParticipationSetStatusInput!): ParticipationSetStatusPayload
    participationDenyApplication(id: ID!, input: ParticipationSetStatusInput!): ParticipationSetStatusPayload

    # performance
    participationApprovePerformance(id: ID!, input: ParticipationSetStatusInput!): ParticipationSetStatusPayload
    participationDenyPerformance(id: ID!, input: ParticipationSetStatusInput!): ParticipationSetStatusPayload
}

# Type definitions

type Participation {
    id: ID!
    status: ParticipationStatus!

    user: User
    community: Community
    opportunity: Opportunity

    statusHistories(first: Int, cursor: String): ParticipationStatusHistoriesConnection @complexity(value: 5, multipliers: ["first"])
    transactions(first: Int, cursor: String): TransactionsConnection @complexity(value: 5, multipliers: ["first"])

    createdAt: Datetime!
    updatedAt: Datetime
}
