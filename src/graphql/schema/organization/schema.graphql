# Queries and Mutations

extend type Query {
    organizations(
        filter: OrganizationFilterInput
        sort: OrganizationSortInput
        cursor: String
        first: Int
    ): OrganizationsConnection!
    organization(id: ID!): Organization
}

extend type Mutation {
    organizationCreate(input: OrganizationCreateInput!): OrganizationCreatePayload
    organizationDelete(id: ID!): OrganizationDeletePayload
    organizationUpdateDefault(id: ID!, input: OrganizationUpdateDefaultInput!): OrganizationUpdateDefaultPayload
    organizationUpdateContent(id: ID!, input: OrganizationUpdateContentInput!): OrganizationUpdateContentPayload
    organizationPublish(id: ID!): OrganizationSwitchPrivacyPayload
    organizationUnpublish(id: ID!): OrganizationSwitchPrivacyPayload
    organizationAddUser(id: ID!, input: OrganizationAddUserInput!): OrganizationUpdateUserPayload
    organizationRemoveUser(id: ID!, input: OrganizationRemoveUserInput!): OrganizationUpdateUserPayload
    organizationAddTarget(id: ID!, input: OrganizationAddTargetInput!): OrganizationUpdateTargetPayload
    organizationRemoveTarget(id: ID!, input: OrganizationRemoveTargetInput!): OrganizationUpdateTargetPayload
    organizationAddGroup(id: ID!, input: OrganizationAddGroupInput!): OrganizationUpdateGroupPayload
    organizationRemoveGroup(id: ID!, input: OrganizationRemoveGroupInput!): OrganizationUpdateGroupPayload
}

# Type definitions

type Organizations {
    total: Int!
    data: [Organization!]!
}

type Organization {
    id: ID!
    name: String!
    isPublic: Boolean!
    entity: String
    entityPosition: EntityPosition
    image: String
    bio: String
    establishedAt: Datetime
    website: String

    zipcode: String!
    state: State!
    city: City!
    address1: String!
    address2: String

    agendas: [Agenda!]
    cities: [City!]

    users: [User!]
    groups: [Group!]

    targets: [Target!]
    events: [Event!]

    createdAt: Datetime!
    updatedAt: Datetime
}
