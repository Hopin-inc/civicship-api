model Group {
  id    String  @id @default(cuid())
  name  String
  image String?
  bio   String?

  users   UsersOnGroups[]
  events  EventsOnGroups[]
  issues  IssuesOnGroups[]
  agendas AgendasOnGroups[]
  cities  CitiesOnGroups[]
  targets Target[]

  parentId String? @map("parent_id")
  parent   Group?  @relation("groups_on_groups", fields: [parentId], references: [id], onDelete: SetNull)
  children Group[] @relation("groups_on_groups")

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("t_groups")
}

model UsersOnGroups {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  role      Role?
  addedAt   DateTime? @map("added_at")
  removedAt DateTime? @map("removed_at")
  isPublic  Boolean   @default(true) @map("is_public")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@map("t_users_on_groups")
}

model EventsOnGroups {
  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([groupId, eventId])
  @@map("t_events_on_groups")
}

model IssuesOnGroups {
  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  issueId String @map("issue_id")
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([groupId, issueId])
  @@map("t_issues_on_groups")
}

model CitiesOnGroups {
  groupId  String @map("group_id")
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  cityCode String @map("city_code")
  city     City   @relation(fields: [cityCode], references: [code], onDelete: Restrict)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([groupId, cityCode])
  @@map("t_cities_on_groups")
}
