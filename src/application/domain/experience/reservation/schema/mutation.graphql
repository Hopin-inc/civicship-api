# ------------------------------
# Reservation Mutation Definitions
# ------------------------------

extend type Mutation {
    reservationCreate(
        input: ReservationCreateInput!
    ): ReservationCreatePayload
    @authz(rules: [IsUser])

    reservationJoin(
        id: ID!
    ): ReservationSetStatusPayload
    @authz(rules: [IsUser])

    reservationCancel(
        id: ID!
        input: ReservationCancelInput!
        permission: CheckIsSelfPermissionInput!
    ): ReservationSetStatusPayload
    @authz(rules: [IsSelf])

    reservationAccept(
        id: ID!
        permission: CheckOpportunityPermissionInput!
    ): ReservationSetStatusPayload
    @authz(rules: [IsCommunityManager, IsOpportunityOwner])

    reservationReject(
        id: ID!
        permission: CheckOpportunityPermissionInput!
    ): ReservationSetStatusPayload
    @authz(rules: [IsCommunityManager, IsOpportunityOwner])
}

# ------------------------------
# Reservation Mutation Input Definitions
# ------------------------------

input ReservationCreateInput {
    opportunitySlotId: ID!
    totalParticipantCount: Int!
    otherUserIds: [ID!]

    paymentMethod: ReservationPaymentMethod!
    ticketIdsIfNeed: [ID!]
}

input ReservationCancelInput {
    paymentMethod: ReservationPaymentMethod!
    ticketIdsIfExists: [ID!]
}

# ------------------------------
# Reservation Mutation Enum Definitions
# ------------------------------

enum ReservationPaymentMethod {
    FEE
    TICKET
}

# ------------------------------
# Reservation Mutation Success Type Definitions
# ------------------------------

type ReservationCreateSuccess {
    reservation: Reservation!
}

type ReservationSetStatusSuccess {
    reservation: Reservation!
}

# ------------------------------
# Reservation Mutation Error Type Definitions
# ------------------------------

type ReservationFullError {
    message: String!
    code: GqlErrorCode!
    capacity: Int!
    requested: Int!
}

type AlreadyJoinedError {
    message: String!
    code: GqlErrorCode!
}

type ReservationConflictError {
    message: String!
    code: GqlErrorCode!
}

type ReservationAdvanceBookingRequiredError {
    message: String!
    code: GqlErrorCode!
}

type ReservationCancellationTimeoutError {
    message: String!
    code: GqlErrorCode!
}

type ReservationNotAcceptedError {
    message: String!
    code: GqlErrorCode!
}

type SlotNotScheduledError {
    message: String!
    code: GqlErrorCode!
}

type NoAvailableParticipationSlotsError {
    message: String!
    code: GqlErrorCode!
}

type MissingTicketIdsError {
    message: String!
    code: GqlErrorCode!
}

type TicketParticipantMismatchError {
    message: String!
    code: GqlErrorCode!
    ticketCount: Int!
    participantCount: Int!
}

# ------------------------------
# Reservation Mutation Union (Payload) Definitions
# ------------------------------

union ReservationCreatePayload =
    ReservationCreateSuccess
    | ReservationFullError
    | ReservationNotAcceptedError
    | SlotNotScheduledError

union ReservationSetStatusPayload =
    ReservationSetStatusSuccess
    | AlreadyJoinedError
    | ReservationCancellationTimeoutError
