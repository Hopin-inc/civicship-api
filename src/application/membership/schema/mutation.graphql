# ------------------------------
# Membership Mutation Definitions
# ------------------------------
extend type Mutation {
    # invite
    membershipInvite(input: MembershipInviteInput!): MembershipInvitePayload
    membershipCancelInvitation(input: MembershipCancelInvitationInput!): MembershipSetInvitationStatusPayload
    membershipAcceptMyInvitation(input: MembershipAcceptMyInvitationInput!): MembershipSetInvitationStatusPayload
    membershipDenyMyInvitation(input: MembershipDenyMyInvitationInput!): MembershipSetInvitationStatusPayload

    # join
    membershipWithdraw(input: MembershipWithdrawInput!): MembershipWithdrawPayload

    # role
    membershipAssignOwner(input: MembershipAssignOwnerInput!): MembershipSetRolePayload
    membershipAssignManager(input: MembershipAssignManagerInput!): MembershipSetRolePayload
    membershipAssignMember(input: MembershipAssignMemberInput!): MembershipSetRolePayload
    membershipRemove(input: MembershipRemoveInput!): MembershipRemovePayload
}

# ------------------------------
# Membership Mutation Input Definitions
# ------------------------------
input MembershipInviteInput {
    userId: ID!
    role: Role

    """Used for permission checking."""
    communityId: ID!
}

input MembershipCancelInvitationInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

input MembershipAcceptMyInvitationInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

input MembershipDenyMyInvitationInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

input MembershipWithdrawInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

input MembershipAssignOwnerInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

input MembershipAssignManagerInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

input MembershipAssignMemberInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

input MembershipRemoveInput {
    userId: ID!

    """Used for permission checking."""
    communityId: ID!
}

# ------------------------------
# Membership Mutation Success Type Definitions
# ------------------------------
type MembershipInviteSuccess {
    membership: Membership!
}

type MembershipSetRoleSuccess {
    membership: Membership!
}

type MembershipRemoveSuccess {
    userId: ID!
    communityId: ID!
}

type MembershipWithdrawSuccess {
    userId: ID!
    communityId: ID!
}

type MembershipSetInvitationStatusSuccess {
    membership: Membership!
}

# ------------------------------
# Membership Mutation Union (Payload) Definitions
# ------------------------------
union MembershipInvitePayload =
    MembershipInviteSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError

union MembershipSetRolePayload =
    MembershipSetRoleSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError

union MembershipRemovePayload =
    MembershipRemoveSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError

union MembershipWithdrawPayload =
    MembershipWithdrawSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError

union MembershipSetInvitationStatusPayload =
    MembershipSetInvitationStatusSuccess |
    InvalidInputValueError |
    AuthError |
    ComplexQueryError
