// eslint-disable-next-line @typescript-eslint/no-require-imports
const fs = require("fs");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const path = require("path");

const schemaPath = path.resolve("src/infrastructure/libs/nmkr/schema/schema.mainnet.json");
const outPath = path.resolve("src/infrastructure/libs/nmkr/types/types.generated.ts");

if (!fs.existsSync(schemaPath)) {
  console.error(
    `[NMKR] ${schemaPath} がありません。先に 'pnpm nmkr:fetch:mainnet' を実行してください。`,
  );
  process.exit(1);
}

const schema = JSON.parse(fs.readFileSync(schemaPath, "utf8"));

// Direct OpenAPI type exports without aliases
let out = `// AUTO-GENERATED by generate-aliases.cjs. DO NOT EDIT.\n`;
out += `// Direct OpenAPI type references for clarity with API specification\n`;
out += `import type { components, paths } from './openapi';\n\n`;
out += `// Direct exports for OpenAPI types\n`;
out += `export type { components, paths };\n\n`;

// --- ユーティリティ
const schemas = (schema.components && schema.components.schemas) || {};

// Only generate Union types for enums that exist in the schema
const enumWanted = {
  Chain: ["Blockchain", "Chain"],
};

function firstEnumOf(names) {
  for (const n of names) {
    if (schemas[n] && Array.isArray(schemas[n].enum)) return schemas[n].enum;
  }
  return null;
}

out += `// Union types for enums found in OpenAPI schema\n`;
for (const [alias, candidates] of Object.entries(enumWanted)) {
  const values = firstEnumOf(candidates);
  if (values) {
    const union = values.map((v) => JSON.stringify(v)).join(" | ");
    out += `export type ${alias} = ${union};\n`;
  }
}
out += `\n`;

// Application-specific types not in OpenAPI spec
out += `// Application-specific Union types for mint operations\n`;
out += `export type MintReservation = { reservationId: string; state: 'reserved'; txHash?: never };\n`;
out += `export type MintedResult   = { state: 'minted'; txHash: string; nftUid: string; reservationId?: string };\n`;
out += `export type MintResult     = MintReservation | MintedResult;\n\n`;

// Wallet creation types (not in OpenAPI schema) - optimized for actual usage
out += `// Wallet creation types for endpoints not in OpenAPI schema\n`;
out += `export interface CreateWalletResponse {\n`;
out += `  address: string;\n`;
out += `  walletName: string;\n`;
out += `  message?: string;\n`;
out += `}\n\n`;

// Note: Subcustomer types removed as they are no longer used in the simplified workflow

// Configuration constants
out += `export const NMKR_CONFIG = {
  DEFAULT_TIMEOUT: 15000,
  MAX_RETRIES: 3,
  RETRY_DELAY_BASE: 1000,
} as const;\n`;

fs.writeFileSync(outPath, out);
console.log(`[NMKR] wrote ${outPath}`);
